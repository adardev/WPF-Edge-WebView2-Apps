{"version":3,"file":"vendors-node_modules_remark-gfm_lib_index_js-node_modules_remark-parse_lib_index_js-node_modu-44d0fc-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/extend/index.js","node_modules/decode-named-character-reference/index.dom.js","node_modules/devlop/lib/default.js","node_modules/mdast-util-find-and-replace/lib/index.js","node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","node_modules/mdast-util-to-markdown/lib/handle/break.js","node_modules/mdast-util-to-markdown/lib/handle/code.js","node_modules/mdast-util-to-markdown/lib/util/check-quote.js","node_modules/mdast-util-to-markdown/lib/util/encode-info.js","node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","node_modules/mdast-util-to-markdown/lib/handle/html.js","node_modules/mdast-util-to-markdown/lib/handle/image.js","node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","node_modules/mdast-util-to-markdown/lib/handle/link.js","node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","node_modules/mdast-util-to-markdown/lib/util/check-rule.js","node_modules/mdast-util-phrasing/lib/index.js","node_modules/mdast-util-to-markdown/lib/handle/strong.js","node_modules/mdast-util-to-markdown/lib/util/check-strong.js","node_modules/mdast-util-to-markdown/lib/handle/index.js","node_modules/mdast-util-to-markdown/lib/util/check-fence.js","node_modules/longest-streak/index.js","node_modules/mdast-util-to-markdown/lib/handle/definition.js","node_modules/mdast-util-to-markdown/lib/handle/heading.js","node_modules/mdast-util-to-markdown/lib/handle/list.js","node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","node_modules/mdast-util-to-markdown/lib/handle/list-item.js","node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","node_modules/mdast-util-to-markdown/lib/handle/root.js","node_modules/mdast-util-to-markdown/lib/handle/text.js","node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","node_modules/mdast-util-to-string/lib/index.js","node_modules/micromark-core-commonmark/lib/blank-line.js","node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","node_modules/micromark-extension-gfm-autolink-literal/lib/html.js","node_modules/micromark-extension-gfm-footnote/lib/syntax.js","node_modules/micromark-extension-gfm-footnote/lib/html.js","node_modules/micromark-extension-gfm-table/lib/edit-map.js","node_modules/micromark-extension-gfm-table/lib/syntax.js","node_modules/micromark-extension-gfm-table/lib/infer.js","node_modules/micromark-extension-gfm-table/lib/html.js","node_modules/micromark-extension-gfm-tagfilter/lib/index.js","node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","node_modules/micromark-extension-gfm/index.js","node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","node_modules/micromark-extension-gfm-strikethrough/lib/html.js","node_modules/micromark-extension-gfm-task-list-item/lib/html.js","node_modules/micromark-factory-space/index.js","node_modules/micromark-util-character/index.js","node_modules/micromark-util-chunked/index.js","node_modules/micromark-util-classify-character/index.js","node_modules/micromark-util-combine-extensions/index.js","node_modules/micromark-util-decode-numeric-character-reference/index.js","node_modules/micromark-util-decode-string/index.js","node_modules/micromark-util-encode/index.js","node_modules/micromark-util-normalize-identifier/index.js","node_modules/micromark-util-resolve-all/index.js","node_modules/micromark-util-sanitize-uri/index.js","node_modules/micromark-util-subtokenize/lib/splice-buffer.js","node_modules/micromark-util-subtokenize/index.js","node_modules/micromark/lib/initialize/content.js","node_modules/micromark/lib/initialize/document.js","node_modules/micromark-core-commonmark/lib/content.js","node_modules/micromark/lib/initialize/flow.js","node_modules/micromark/lib/initialize/text.js","node_modules/micromark-core-commonmark/lib/thematic-break.js","node_modules/micromark-core-commonmark/lib/list.js","node_modules/micromark-core-commonmark/lib/block-quote.js","node_modules/micromark-factory-destination/index.js","node_modules/micromark-factory-label/index.js","node_modules/micromark-factory-title/index.js","node_modules/micromark-factory-whitespace/index.js","node_modules/micromark-core-commonmark/lib/definition.js","node_modules/micromark-core-commonmark/lib/code-indented.js","node_modules/micromark-core-commonmark/lib/setext-underline.js","node_modules/micromark-util-html-tag-name/index.js","node_modules/micromark-core-commonmark/lib/html-flow.js","node_modules/micromark-core-commonmark/lib/code-fenced.js","node_modules/micromark-core-commonmark/lib/character-reference.js","node_modules/micromark-core-commonmark/lib/character-escape.js","node_modules/micromark-core-commonmark/lib/line-ending.js","node_modules/micromark-core-commonmark/lib/label-end.js","node_modules/micromark-core-commonmark/lib/label-start-image.js","node_modules/micromark-core-commonmark/lib/attention.js","node_modules/micromark-core-commonmark/lib/label-start-link.js","node_modules/micromark/lib/constructs.js","node_modules/micromark-core-commonmark/lib/heading-atx.js","node_modules/micromark-core-commonmark/lib/autolink.js","node_modules/micromark-core-commonmark/lib/html-text.js","node_modules/micromark-core-commonmark/lib/hard-break-escape.js","node_modules/micromark-core-commonmark/lib/code-text.js","node_modules/micromark/lib/parse.js","node_modules/micromark/lib/create-tokenizer.js","node_modules/micromark/lib/postprocess.js","node_modules/micromark/lib/preprocess.js","node_modules/ccount/index.js","node_modules/mdast-util-gfm-autolink-literal/lib/index.js","node_modules/mdast-util-gfm-footnote/lib/index.js","node_modules/mdast-util-gfm-strikethrough/lib/index.js","node_modules/markdown-table/index.js","node_modules/mdast-util-gfm-table/lib/index.js","node_modules/mdast-util-gfm-task-list-item/lib/index.js","node_modules/remark-gfm/lib/index.js","node_modules/mdast-util-gfm/lib/index.js","node_modules/mdast-util-from-markdown/lib/index.js","node_modules/remark-parse/lib/index.js","node_modules/bail/index.js","node_modules/is-plain-obj/index.js","node_modules/unified/lib/callable-instance.js","node_modules/unified/lib/index.js","node_modules/trough/index.js","node_modules/unist-util-is/lib/index.js","node_modules/unist-util-stringify-position/lib/index.js","node_modules/unist-util-visit-parents/lib/index.js","node_modules/unist-util-visit/lib/index.js","node_modules/vfile-message/lib/index.js","node_modules/vfile/lib/minpath.browser.js","node_modules/vfile/lib/minproc.browser.js","node_modules/vfile/lib/minurl.shared.js","node_modules/vfile/lib/index.js","node_modules/vfile/lib/minurl.browser.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {CompileContext, Handle, HtmlExtension, Token} from 'micromark-util-types'\n */\n\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub autolink literal\n * when serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GitHub autolink literal when serializing to HTML.\n */\nexport function gfmAutolinkLiteralHtml() {\n  return {\n    exit: {\n      literalAutolinkEmail,\n      literalAutolinkHttp,\n      literalAutolinkWww\n    }\n  };\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token);\n}\n\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string | null | undefined} [protocol]\n * @returns {undefined}\n */\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token);\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">');\n  this.raw(this.encode(url));\n  this.tag('</a>');\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {HtmlOptions as Options} from 'micromark-extension-gfm-footnote'\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst own = {}.hasOwnProperty;\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return 'Back to reference ' + (referenceIndex + 1) + (rereferenceIndex > 1 ? '-' + rereferenceIndex : '');\n}\n\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration (optional).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\nexport function gfmFootnoteHtml(options) {\n  const config = options || emptyOptions;\n  const label = config.label || 'Footnotes';\n  const labelTagName = config.labelTagName || 'h2';\n  const labelAttributes = config.labelAttributes === null || config.labelAttributes === undefined ? 'class=\"sr-only\"' : config.labelAttributes;\n  const backLabel = config.backLabel || defaultBackLabel;\n  const clobberPrefix = config.clobberPrefix === null || config.clobberPrefix === undefined ? 'user-content-' : config.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = this.getData('tightStack');\n        stack.push(false);\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n      gfmFootnoteCallString() {\n        this.buffer();\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = this.getData('gfmFootnoteDefinitions');\n        const footnoteStack = this.getData('gfmFootnoteDefinitionStack');\n        const tightStack = this.getData('tightStack');\n        const current = footnoteStack.pop();\n        const value = this.resume();\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true);\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n        this.setData('lastWasTag');\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack = this.getData('gfmFootnoteDefinitionStack');\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n        this.buffer(); // Get ready for a value.\n      },\n      gfmFootnoteCallString(token) {\n        let calls = this.getData('gfmFootnoteCallOrder');\n        let counts = this.getData('gfmFootnoteCallCounts');\n        const id = normalizeIdentifier(this.sliceSerialize(token));\n        /** @type {number} */\n        let counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        const index = calls.indexOf(id);\n        const safeId = sanitizeUri(id.toLowerCase());\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n        const reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n      null() {\n        const calls = this.getData('gfmFootnoteCallOrder') || [];\n        const counts = this.getData('gfmFootnoteCallCounts') || {};\n        const definitions = this.getData('gfmFootnoteDefinitions') || {};\n        let index = -1;\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><' + labelTagName + ' id=\"footnote-label\"' + (labelAttributes ? ' ' + labelAttributes : '') + '>');\n          this.raw(this.encode(label));\n          this.tag('</' + labelTagName + '>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index];\n          const safeId = sanitizeUri(id.toLowerCase());\n          let referenceIndex = 0;\n          /** @type {Array<string>} */\n          const references = [];\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" aria-label=\"' + this.encode(typeof backLabel === 'string' ? backLabel : backLabel(index, referenceIndex)) + '\" class=\"data-footnote-backref\">↩' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n          const reference = references.join(' ');\n          let injected = false;\n          this.lineEndingIfNeeded();\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n          this.lineEndingIfNeeded();\n          this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, function ($0) {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n          if (!injected) {\n            this.lineEndingIfNeeded();\n            this.tag(reference);\n          }\n          this.lineEndingIfNeeded();\n          this.tag('</li>');\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n    }\n  };\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push([...events]);\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      events.push(...slice);\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n};\n\n// To do: micromark@5: use `infer` here, when all events are exposed.\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GitHub tables when serializing to HTML.\n */\nexport function gfmTableHtml() {\n  return {\n    enter: {\n      table(token) {\n        const tableAlign = token._align;\n        this.lineEndingIfNeeded();\n        this.tag('<table>');\n        this.setData('tableAlign', tableAlign);\n      },\n      tableBody() {\n        this.tag('<tbody>');\n      },\n      tableData() {\n        const tableAlign = this.getData('tableAlign');\n        const tableColumn = this.getData('tableColumn');\n        const align = alignment[tableAlign[tableColumn]];\n        if (align === undefined) {\n          // Capture results to ignore them.\n          this.buffer();\n        } else {\n          this.lineEndingIfNeeded();\n          this.tag('<td' + align + '>');\n        }\n      },\n      tableHead() {\n        this.lineEndingIfNeeded();\n        this.tag('<thead>');\n      },\n      tableHeader() {\n        const tableAlign = this.getData('tableAlign');\n        const tableColumn = this.getData('tableColumn');\n        const align = alignment[tableAlign[tableColumn]];\n        this.lineEndingIfNeeded();\n        this.tag('<th' + align + '>');\n      },\n      tableRow() {\n        this.setData('tableColumn', 0);\n        this.lineEndingIfNeeded();\n        this.tag('<tr>');\n      }\n    },\n    exit: {\n      // Overwrite the default code text data handler to unescape escaped pipes when\n      // they are in tables.\n      codeTextData(token) {\n        let value = this.sliceSerialize(token);\n        if (this.getData('tableAlign')) {\n          value = value.replace(/\\\\([\\\\|])/g, replace);\n        }\n        this.raw(this.encode(value));\n      },\n      table() {\n        this.setData('tableAlign');\n        // Note: we don’t set `slurpAllLineEndings` anymore, in delimiter rows,\n        // but we do need to reset it to match a funky newline GH generates for\n        // list items combined with tables.\n        this.setData('slurpAllLineEndings');\n        this.lineEndingIfNeeded();\n        this.tag('</table>');\n      },\n      tableBody() {\n        this.lineEndingIfNeeded();\n        this.tag('</tbody>');\n      },\n      tableData() {\n        const tableAlign = this.getData('tableAlign');\n        const tableColumn = this.getData('tableColumn');\n        if (tableColumn in tableAlign) {\n          this.tag('</td>');\n          this.setData('tableColumn', tableColumn + 1);\n        } else {\n          // Stop capturing.\n          this.resume();\n        }\n      },\n      tableHead() {\n        this.lineEndingIfNeeded();\n        this.tag('</thead>');\n      },\n      tableHeader() {\n        const tableColumn = this.getData('tableColumn');\n        this.tag('</th>');\n        this.setData('tableColumn', tableColumn + 1);\n      },\n      tableRow() {\n        const tableAlign = this.getData('tableAlign');\n        let tableColumn = this.getData('tableColumn');\n        while (tableColumn < tableAlign.length) {\n          this.lineEndingIfNeeded();\n          this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>');\n          tableColumn++;\n        }\n        this.setData('tableColumn', tableColumn);\n        this.lineEndingIfNeeded();\n        this.tag('</tr>');\n      }\n    }\n  };\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0;\n}","/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n// An opening or closing tag start, followed by a case-insensitive specific tag name,\n// followed by HTML whitespace, a greater than, or a slash.\nconst reFlow =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n// As HTML (text) parses tags separately (and very strictly), we don’t need to be\n// global.\nconst reText = new RegExp('^' + reFlow.source, 'i')\n\n/**\n * Create an HTML extension for `micromark` to support GitHubs weird and\n * useless tagfilter when serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to support\n *   GitHubs weird and useless tagfilter when serializing to HTML.\n */\nexport function gfmTagfilterHtml() {\n  return {\n    exit: {\n      htmlFlowData(token) {\n        exitHtmlData.call(this, token, reFlow)\n      },\n      htmlTextData(token) {\n        exitHtmlData.call(this, token, reText)\n      }\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n * @returns {undefined}\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\n/**\n * Create an HTML extension for `micromark` to support GFM strikethrough when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions`, to\n *   support GFM strikethrough when serializing to HTML.\n */\nexport function gfmStrikethroughHtml() {\n  return {\n    enter: {\n      strikethrough() {\n        this.tag('<del>');\n      }\n    },\n    exit: {\n      strikethrough() {\n        this.tag('</del>');\n      }\n    }\n  };\n}","/**\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItemHtml() {\n  return {\n    enter: {\n      taskListCheck() {\n        this.tag('<input type=\"checkbox\" disabled=\"\" ');\n      }\n    },\n    exit: {\n      taskListCheck() {\n        this.tag('/>');\n      },\n      taskListCheckValueChecked() {\n        this.tag('checked=\"\" ');\n      }\n    }\n  };\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   *   Value to replace.\n   * @returns {string}\n   *   Encoded value.\n   */\n  function replace(value) {\n    return (\n      '&' +\n      characterReferences[\n        /** @type {keyof typeof characterReferences} */ (value)\n      ] +\n      ';'\n    )\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[text][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","charCodeAt","ok","unreachable","findAndReplace","tree","list","ignored","settings","ignore","pairs","toPairs","tupleOrList","result","index","find","tuple","push","string","replace","toFunction","pairIndex","visitor","node","parents","grandparent","parent","siblings","children","undefined","indexOf","handler","start","change","nodes","lastIndex","match","exec","position","matchObject","input","stack","type","slice","global","splice","map","line","_","blank","hardBreak","_1","state","info","unsafe","character","test","before","checkQuote","marker","quote","encodeInfo","outside","inside","outsideKind","insideKind","emphasis","checkEmphasis","exit","enter","tracker","createTracker","move","between","containerPhrasing","after","current","betweenHead","open","betweenTail","close","attentionEncodeSurroundingInfo","peek","html","suffix","subexit","safe","alt","url","title","imageReference","referenceType","reference","associationId","inlineCode","sequence","pattern","expression","compilePattern","atBreak","formatLinkAsAutolink","raw","Boolean","resourceLink","linkReference","text","checkBullet","bullet","checkRule","rule","phrasing","strong","checkStrong","handle","blockquote","shift","indentLines","containerFlow","break","code","checkFence","fence","repeat","Math","max","longestStreak","substring","source","String","expected","count","lang","encode","meta","definition","heading","rank","min","depth","f","lastIndexOf","closeAtx","image","link","bulletCurrent","ordered","checkBulletOrdered","bulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","item","listItem","listItemIndent","checkListItemIndent","style","incrementListMarker","size","spread","ceil","paragraph","root","container","hasPhrasing","some","d","thematicBreak","ruleSpaces","checkRuleRepetition","repetition","ruleRepetition","encodeCharacterReference","toUpperCase","formatCodeAsIndented","fences","formatHeadingAsSetext","literalWithBreak","setext","patternInScope","listInScope","inConstruct","notInConstruct","none","includes","emptyOptions","one","includeImageAlt","includeHtml","all","values","join","blankLine","partial","tokenize","effects","nok","wwwPrefix","wwwPrefixInside","consume","wwwPrefixAfter","domain","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","check","trail","domainAfter","domainAtPunctuation","path","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","self","previousWww","previous","previousUnbalanced","events","attempt","wwwAfter","protocolAutolink","buffer","previousProtocol","fromCodePoint","protocolPrefixInside","protocol","toLowerCase","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","data","gfmAtext","previousEmail","atext","emailDomain","emailDomainAfter","emailDomainDot","token","_balanced","_gfmAutolinkLiteralWalkedInto","literalAutolinkWww","anchorFromToken","literalAutolinkEmail","literalAutolinkHttp","sliceSerialize","tag","indent","tail","tokenizePotentialGfmFootnoteCall","labelStart","defined","parser","gfmFootnotes","id","end","now","codePointAt","resolveToPotentialGfmFootnoteCall","context","assign","column","offset","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","own","defaultBackLabel","referenceIndex","rereferenceIndex","EditMap","add","remove","addImplementation","editMap","at","sort","a","b","vecs","pop","tokenizeTable","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","constructs","disable","null","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","cell","afterHeadAwaitingFirstBodyRow","lastTableEnd","event","flushTableEnd","flushCell","_align","gfmTableAlign","inDelimiterRow","align","alignIndex","range","rowEnd","previousCell","getPoint","relatedStart","relatedEnd","valueToken","table","tableBody","exits","related","side","alignment","left","right","center","$0","$1","reFlow","reText","exitHtmlData","filter","allowDangerousHtml","tasklistCheck","_gfmTasklistFirstContentOfListItem","spaceThenNonSpace","gfm","continuation","resolveTo","gfmStrikethrough","single","options_","singleTilde","tokenizer","more","_open","_close","resolveAll","strikethrough","nextEvents","insideSpan","attentionMarkers","flow","gfmHtml","gfmFootnoteHtml","config","label","labelTagName","labelAttributes","backLabel","clobberPrefix","gfmFootnoteDefinition","getData","gfmFootnoteDefinitionLabelString","gfmFootnoteCallString","definitions","footnoteStack","tightStack","resume","setData","counter","calls","counts","safeId","reuseCounter","lineEndingIfNeeded","references","injected","tableAlign","tableData","tableHead","tableHeader","tableRow","codeTextData","tableColumn","htmlFlowData","htmlTextData","taskListCheck","taskListCheckValueChecked","factorySpace","limit","Number","POSITIVE_INFINITY","prefix","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","items","parameters","chunkStart","from","unshift","classifyCharacter","combineExtensions","extensions","syntaxExtension","extension","hook","maybe","existing","combineHtmlExtensions","htmlExtensions","handlers","htmlExtension","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decodeString","decode","$2","head","hex","characterReferences","normalizeIdentifier","called","resolve","sanitizeUri","normalizeUri","colon","questionMark","numberSign","slash","skip","encodeURIComponent","SpliceBuffer","initial","get","setCursor","stop","reverse","concat","deleteCount","trunc","removed","chunkedPush","pushMany","unshiftMany","n","subtokenize","eventsArray","lineIndex","otherIndex","otherEvent","subevents","jumps","_tokenizer","_isInFirstContentOfListItem","subcontent","eventIndex","stream","startPosition","startPositions","childEvents","gaps","adjust","breaks","sliceStream","defineSkip","write","content","contentStart","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","containerState","documentContinue","checkNewContainers","_closeFlow","point","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","endOfFile","entry","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","extraResolver","tabs","chunks","bufferIndex","_index","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","kind","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","factoryTitle","begin","escape","factoryWhitespace","titleBefore","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","setextUnderline","htmlBlockNames","htmlRawNames","blankLineBefore","nonLazyContinuationStart","nonLazyContinuation","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sequenceCloseAfter","initialPrefix","sequenceOpen","infoBefore","atNonLazyBreak","metaBefore","contentBefore","beforeContentChunk","contentChunk","numeric","characterEscape","lineEnding","labelEnd","newEvents","media","_inactive","group","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","use","movePoint","labelStartLink","markerAfter","destinationBefore","destinationAfter","afterWhitespace","sequenceFurther","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeClosingTagAfter","completeEnd","completeAttributeNameBefore","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","tailExitIndex","headEnterIndex","parse","create","createTokenizer","initialize","columnStart","resolveAllConstructs","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","serializeChunks","atTab","main","chunkIndex","go","sliceChunks","view","startIndex","startBufferIndex","endIndex","endBufferIndex","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","postprocess","search","preprocess","atCarriageReturn","encoding","endPosition","TextDecoder","ccount","enterLiteralAutolink","enterLiteralAutolinkValue","autolinkProtocol","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","autolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","isCorrectDomain","parts","split","splitUrl","trailExec","closingParenIndex","openingParens","closingParens","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","footnoteDefinition","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","defaultStringLength","toAlignment","enterTable","inTable","exitTable","enterRow","enterCell","exitCodeText","exitCheck","checked","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","transforms","literalAutolink","gfmFootnoteCall","canContainEols","codeText","taskListCheckValueUnchecked","delete","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableAsData","handleTableRowAsData","tableCell","handleTableCell","matrix","markdownTable","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","lines","delimiterStart","delimiterEnd","defaultOnError","remarkParse","doc","mdastExtensions","compiler","autolink","opener","onenterdata","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","hardBreakEscape","hardBreakTrailing","htmlFlow","htmlText","_spread","listItemValue","expectingFirstListItemValue","ancestor","listOrdered","listUnordered","referenceString","resourceDestinationString","resourceTitleString","setextHeading","closer","atxHeadingSequence","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","characterReferenceType","flowCodeInside","codeFencedFence","onexithardbreak","inReference","fragment","labelText","atHardBreak","setextHeadingSlurpLineEnding","resource","setextHeadingLineSequence","setextHeadingText","configure","combined","tokenStack","listStack","prepareList","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","and","errorHandler","onExitError","bail","error","getPrototypeOf","Symbol","toStringTag","iterator","CallableInstance","property","proto","constr","apply","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","trough","fns","pipeline","run","middlewareIndex","callback","output","fn","wrap","middleware","fnExpectsCallback","done","Promise","then","Error","middelware","destination","attacher","assertUnfrozen","freeze","transformer","file","realFile","vfile","assertParser","process","assertCompiler","executor","reject","parseTree","realDone","compileResult","stringify","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugins","plugin","entryIndex","primary","rest","currentPrimary","unified","asyncName","looksLikeAVFile","convert","castFactory","anyFactory","tests","checks","nodeAsRecord","checkAsRecord","testFunction","looksLikeANode","stringifyPosition","pos","empty","EXIT","visitParents","is","step","factory","visit","subresult","grandparents","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","VFileMessage","causeOrReason","optionsOrParentOrPlace","origin","reason","legacyCause","place","ancestors","cause","message","ruleId","fatal","actual","note","minpath","basename","extname","seenNonSlash","assertPath","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","segments","joined","normalize","absolute","normalizeString","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","sep","JSON","minproc","cwd","isUrl","fileUrlOrPath","href","auth","order","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","urlToPath","URL","getPathFromURLPosix","hostname","pathname","third","decodeURIComponent","fail","decoder","part"],"sourceRoot":""}