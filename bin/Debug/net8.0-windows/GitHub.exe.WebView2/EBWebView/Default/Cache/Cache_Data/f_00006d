{"version":3,"file":"ui_packages_list-view_src_hooks_use-next-header-tag_ts-ui_packages_list-view_src_ListItem_Lis-0a5d95-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/action-bar/src/ActionBarContentContext.tsx","ui/packages/action-bar/src/ActionBarRefContext.tsx","ui/packages/action-bar/src/utils.ts","ui/packages/action-bar/src/ActionBarResizeContext.tsx","ui/packages/action-bar/src/OverflowMenu.module.css","ui/packages/action-bar/src/OverflowMenu.tsx","ui/packages/action-bar/src/VisibleAndOverflowContainer.module.css","ui/packages/action-bar/src/VisibleItem.module.css","ui/packages/action-bar/src/VisibleItem.tsx","ui/packages/action-bar/src/VisibleItems.module.css","ui/packages/action-bar/src/VisibleItems.tsx","ui/packages/action-bar/src/VisibleAndOverflowContainer.tsx","ui/packages/action-bar/src/ActionBar.tsx","ui/packages/list-view/src/constants.ts","ui/packages/list-view/src/hooks/use-next-header-tag.ts","ui/packages/use-synced-state/use-synced-state.ts","ui/packages/list-view/src/ListItem/ActionBar.module.css","ui/packages/list-view/src/ListItem/ActionBar.tsx","ui/packages/list-view/src/ListItem/DescriptionContext.tsx","ui/packages/list-view/src/ListItem/ActionsContext.tsx","ui/packages/list-view/src/ListItem/ListItem.module.css","ui/packages/list-view/src/ListItem/MetadataContainer.module.css","ui/packages/list-view/src/ListItem/MetadataContainer.tsx","ui/packages/list-view/src/ListItem/ListItem.tsx","ui/packages/list-view/src/ListItem/NewActivityContext.tsx","ui/packages/list-view/src/ListItem/SelectionContext.tsx","ui/packages/list-view/src/ListItem/StatusContext.tsx","ui/packages/list-view/src/ListItem/TitleContext.tsx","ui/packages/list-view/src/ListView/IdContext.tsx","ui/packages/list-view/src/ListView/ItemsContext.tsx","ui/packages/list-view/src/hooks/use-roving-tab-index.ts","ui/packages/list-view/src/ListView/ListView.module.css","ui/packages/list-view/src/ListView/ListView.tsx","ui/packages/list-view/src/ListView/MultiPageSelectionContext.tsx","ui/packages/list-view/src/ListView/SelectionContext.tsx","ui/packages/list-view/src/ListView/TitleContext.tsx","ui/packages/list-view/src/ListView/VariantContext.tsx"],"sourcesContent":["import {createContext, type PropsWithChildren, useContext, useMemo} from 'react'\n\nimport type {Action, StaticMenuAction} from './types'\n\nexport type ActionBarContentContextProps = {\n  /**\n   * Description of the controls found in the action bar, e.g., \"Issue actions\", \"Markdown formatting tools\".\n   * Will be used in a hidden label for accessibility purposes.\n   */\n  label: string\n  /**\n   * The controls to show in the action bar. These will move into a dropdown menu when the screen isn't big enough to\n   * fit them side by side.\n   */\n  actions?: Action[]\n\n  /**\n   * The controls to always show in the overflow menu, even when there's enough space to show them side by side.\n   */\n  staticMenuActions?: StaticMenuAction[]\n\n  /**\n   * Determines accessibility specific behavior of the action bar. Toolbar assigns a toolbar role and enables custom keyboard navigation.\n   * Menu uses default browser behavior and does not enable custom keyboard navigation.\n   * Defaults to \"toolbar\"\n   */\n  variant?: 'toolbar' | 'menu'\n\n  /**\n   * CSS variable string for how much space should be between individual actions as well as between\n   * actions and the overflow menu toggle button.\n   */\n  gap: string | 0\n}\n\nconst ActionBarContentContext = createContext<ActionBarContentContextProps>({\n  actions: [],\n  staticMenuActions: [],\n  label: 'Actions',\n  gap: 0,\n})\n\ntype ActionBarContentProviderProps = PropsWithChildren & {value: ActionBarContentContextProps}\n\nexport const ActionBarContentProvider = ({\n  children,\n  value: {actions = [], staticMenuActions, variant = 'toolbar', label, gap},\n}: ActionBarContentProviderProps) => {\n  const value = useMemo(\n    () => ({actions, staticMenuActions, variant, label, gap}),\n    [actions, staticMenuActions, variant, label, gap],\n  )\n  return <ActionBarContentContext.Provider value={value}>{children}</ActionBarContentContext.Provider>\n}\n\nexport const useActionBarContent = () => {\n  const context = useContext(ActionBarContentContext)\n  if (!context) throw new Error('useActionBarContent must be used with ActionBarContentProvider.')\n  return context\n}\n\ntry{ ActionBarContentContext.displayName ||= 'ActionBarContentContext' } catch {}\ntry{ ActionBarContentProvider.displayName ||= 'ActionBarContentProvider' } catch {}","import {createContext, createRef, type PropsWithChildren, type RefObject, useContext, useMemo, useRef} from 'react'\n\ntype ActionBarRefContextProps = {\n  outerContainerRef: RefObject<HTMLDivElement>\n  itemContainerRef: RefObject<HTMLDivElement>\n  anchorRef?: RefObject<HTMLElement>\n}\n\nconst ActionBarRefContext = createContext<ActionBarRefContextProps>({\n  // eslint-disable-next-line @eslint-react/no-create-ref\n  outerContainerRef: createRef(),\n  // eslint-disable-next-line @eslint-react/no-create-ref\n  itemContainerRef: createRef(),\n})\n\nexport const ActionBarRefProvider = ({\n  value: {anchorRef},\n  children,\n}: PropsWithChildren & {value: Pick<ActionBarRefContextProps, 'anchorRef'>}) => {\n  const outerContainerRef = useRef<HTMLDivElement>(null)\n  const itemContainerRef = useRef<HTMLDivElement>(null)\n  const value = useMemo(() => ({outerContainerRef, itemContainerRef, anchorRef}), [anchorRef])\n  return <ActionBarRefContext.Provider value={value}>{children}</ActionBarRefContext.Provider>\n}\n\nexport const useActionBarRef = () => {\n  const context = useContext(ActionBarRefContext)\n  if (!context) throw new Error('useActionBarRef must be used with ActionBarRefProvider.')\n  return context\n}\n\ntry{ ActionBarRefContext.displayName ||= 'ActionBarRefContext' } catch {}\ntry{ ActionBarRefProvider.displayName ||= 'ActionBarRefProvider' } catch {}","import type {Density} from './types'\n\nconst columnGap = (el: Element | null) => {\n  if (!el) return 0\n  const computedStyle = window.getComputedStyle(el)\n  if (computedStyle?.columnGap) return parseInt(computedStyle.columnGap, 10) // e.g., '16px' => 16\n  return 0\n}\n\nexport const calculateItemOffsetWidth = (item: Element, itemContainer: HTMLDivElement | null) => {\n  const gap = columnGap(itemContainer) * 2\n  const width = item.getBoundingClientRect().width\n  const itemStyle = window.getComputedStyle(item)\n  const marginLeft = itemStyle?.marginLeft ? parseInt(itemStyle.marginLeft, 10) : 0\n  const marginRight = itemStyle?.marginRight ? parseInt(itemStyle.marginRight, 10) : 0\n  return width + marginLeft + marginRight + gap\n}\n\n/**\n * How much space is the overflow menu toggle button taking up?\n */\nexport const calculateMenuSpace = (outerContainer: HTMLDivElement | null, itemContainer: HTMLDivElement | null) => {\n  const availableSpace = calculateAvailableSpace(outerContainer, itemContainer)\n  if (typeof availableSpace === 'undefined') return\n  let menuSpace = availableSpace\n  if (itemContainer) menuSpace -= itemContainer.offsetLeft\n  return menuSpace\n}\n\n/**\n * How much space do we have to expand into, to show more action items?\n * @returns Get the offset of the item container from the container edge\n */\nexport const calculateAvailableSpace = (\n  outerContainer: HTMLDivElement | null,\n  itemContainer: HTMLDivElement | null,\n) => {\n  if (!outerContainer) return\n  let availableSpace = outerContainer.offsetWidth\n  if (itemContainer) availableSpace -= itemContainer.offsetWidth\n  return availableSpace\n}\n\nexport const gapFromDensity = (density?: Density) => {\n  if (density === 'condensed') return 'var(--base-size-4)'\n  if (density === 'spacious') return 'var(--base-size-16)'\n  if (density === 'none') return 0\n  return 'var(--base-size-8)'\n}\n","import {noop} from '@github-ui/noop'\nimport {useSyncedState} from '@github-ui/use-synced-state'\nimport {useIsomorphicLayoutEffect, useResizeObserver} from '@primer/react'\nimport {createContext, type PropsWithChildren, useCallback, useContext, useMemo, useState} from 'react'\n\nimport {useActionBarRef} from './ActionBarRefContext'\nimport {calculateAvailableSpace, calculateItemOffsetWidth, calculateMenuSpace} from './utils'\n\ntype ActionBarResizeContextProps = {\n  /**\n   * The index of the key for the last `action` node that fits on the screen.\n   */\n  visibleChildEndIndex: number\n  /**\n   * Whether the justify-content CSS style for the outer container should be 'space-between' or not.\n   */\n  justifySpaceBetween: boolean\n\n  /**\n   * Handler to trigger a recalculation of which action items should be visible versus hidden in the overflow menu.\n   * Can be used in one of the given nested menus or nested select panels, such as if the selection of list items\n   * changes in the select panel and that affects the width of the select panel toggle button rendered in the action\n   * bar.\n   */\n  recalculateItemSize: (key: string, el: HTMLElement) => void\n}\n\nconst ActionBarResizeContext = createContext<ActionBarResizeContextProps>({\n  visibleChildEndIndex: 0,\n  justifySpaceBetween: false,\n  recalculateItemSize: noop,\n})\n\nexport type ActionBarResizeProviderValueProps = {\n  actionKeys: string[]\n}\n\ntype ActionBarResizeProviderProps = PropsWithChildren & {value: ActionBarResizeProviderValueProps}\n\nexport const ActionBarResizeProvider = ({children, value: {actionKeys}}: ActionBarResizeProviderProps) => {\n  const totalActions = actionKeys.length\n  const [visibleChildEndIndex, setVisibleChildEndIndex] = useSyncedState(totalActions)\n  const {outerContainerRef, itemContainerRef} = useActionBarRef()\n  const [previousBarWidth, setPreviousBarWidth] = useState<number | undefined>()\n  const [initialBarWidth, setInitialBarWidth] = useState<number | undefined>()\n  const [itemOffsetWidths, setItemOffsetWidths] = useState<Map<string, number | undefined>>(\n    new Map(actionKeys.map(key => [key, undefined])),\n  )\n  const [justifySpaceBetween, setJustifySpaceBetween] = useState<boolean>(false)\n  const allItemWidthsCalculated = useMemo(\n    () =>\n      // Not all items are visible so we only check the visible ones\n      actionKeys\n        .slice(0, visibleChildEndIndex)\n        .every(key => itemOffsetWidths.has(key) && typeof itemOffsetWidths.get(key) === 'number'),\n    [actionKeys, itemOffsetWidths, visibleChildEndIndex],\n  )\n\n  const itemWidthAt = useCallback(\n    (index: number) => {\n      const key = actionKeys[index]\n      if (key) return itemOffsetWidths.get(key)\n    },\n    [actionKeys, itemOffsetWidths],\n  )\n\n  const recalculateItemSize = useCallback(\n    (key: string, el: HTMLElement) => {\n      // If the item container isn't shown, none of the items are visible so we can't know their size\n      const itemContainer = itemContainerRef.current\n      if (!itemContainer) return\n\n      const newWidth = calculateItemOffsetWidth(el, itemContainer)\n\n      setItemOffsetWidths(oldVal => {\n        if (newWidth === oldVal.get(key) || isNaN(newWidth)) return oldVal\n\n        const newVal = new Map<string, number | undefined>(Array.from(oldVal.entries()))\n        newVal.set(key, newWidth)\n        return newVal\n      })\n    },\n    [itemContainerRef],\n  )\n\n  const shrink = useCallback(() => {\n    // Don't try moving any items to the overflow menu if we haven't calculated yet how wide each item is when visible\n    if (!allItemWidthsCalculated) return\n\n    const outerContainer = outerContainerRef.current\n    const itemContainer = itemContainerRef.current\n    const availableSpace = calculateAvailableSpace(outerContainer, itemContainer)\n    if (typeof availableSpace === 'undefined') return\n\n    // Hide right-most item that's visible if there isn't enough space for it\n    const menuSpace = calculateMenuSpace(outerContainer, itemContainer)\n    if (typeof menuSpace === 'undefined') return\n\n    if (availableSpace <= menuSpace) setVisibleChildEndIndex(Math.max(0, visibleChildEndIndex - 1))\n  }, [allItemWidthsCalculated, outerContainerRef, itemContainerRef, setVisibleChildEndIndex, visibleChildEndIndex])\n\n  const grow = useCallback(() => {\n    const outerContainer = outerContainerRef.current\n    const itemContainer = itemContainerRef.current\n    const availableSpace = calculateAvailableSpace(outerContainer, itemContainer)\n    if (typeof availableSpace === 'undefined') return\n\n    // If we don't know how wide the next item is, we can't safely show it, so bail out\n    const itemWidth = itemWidthAt(visibleChildEndIndex)\n    if (typeof itemWidth === 'undefined') return\n\n    const menuSpace = calculateMenuSpace(outerContainer, itemContainer)\n    if (typeof menuSpace === 'undefined') return\n\n    if (availableSpace > menuSpace + itemWidth) {\n      setVisibleChildEndIndex(Math.min(totalActions, visibleChildEndIndex + 1))\n    }\n  }, [outerContainerRef, itemContainerRef, itemWidthAt, visibleChildEndIndex, setVisibleChildEndIndex, totalActions])\n\n  const update = useCallback(() => {\n    const outerContainer = outerContainerRef.current\n    const itemContainer = itemContainerRef.current\n    if (!outerContainer || !itemContainer) return\n\n    const currentBarWidth = outerContainer.offsetWidth\n    if (!currentBarWidth) return\n\n    if (typeof previousBarWidth === 'undefined' || currentBarWidth <= previousBarWidth) shrink()\n    else if (currentBarWidth > previousBarWidth) grow()\n\n    setPreviousBarWidth(currentBarWidth)\n    setJustifySpaceBetween(currentBarWidth <= (initialBarWidth ?? itemContainer.offsetWidth))\n  }, [grow, shrink, initialBarWidth, previousBarWidth, outerContainerRef, itemContainerRef])\n\n  useIsomorphicLayoutEffect(() => {\n    const itemContainer = itemContainerRef.current\n    if (!itemContainer) return\n\n    const widths = new Map<string, number | undefined>()\n\n    for (const key of actionKeys) {\n      const el = itemContainer.querySelector(`[data-action-bar-item=\"${key}\"]`)\n      if (el) widths.set(key, calculateItemOffsetWidth(el, itemContainer))\n    }\n\n    setItemOffsetWidths(widths)\n  }, [actionKeys, itemContainerRef])\n\n  useIsomorphicLayoutEffect(() => {\n    const itemContainer = itemContainerRef.current\n    if (itemContainer) setInitialBarWidth(itemContainer.offsetWidth)\n  }, [itemContainerRef])\n\n  useIsomorphicLayoutEffect(() => {\n    update()\n  }, [update])\n\n  useResizeObserver(update, outerContainerRef)\n\n  const value = useMemo<ActionBarResizeContextProps>(\n    () => ({visibleChildEndIndex, justifySpaceBetween, recalculateItemSize}),\n    [visibleChildEndIndex, justifySpaceBetween, recalculateItemSize],\n  )\n  return <ActionBarResizeContext.Provider value={value}>{children}</ActionBarResizeContext.Provider>\n}\n\nexport const useActionBarResize = () => {\n  const context = useContext(ActionBarResizeContext)\n  if (!context) {\n    return {\n      justifySpaceBetween: false,\n      visibleChildEndIndex: 0,\n      recalculateItemSize: noop,\n    }\n  }\n  return context\n}\n\ntry{ ActionBarResizeContext.displayName ||= 'ActionBarResizeContext' } catch {}\ntry{ ActionBarResizeProvider.displayName ||= 'ActionBarResizeProvider' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"IconButton_0\":\"OverflowMenu-module__IconButton_0--P3118\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {KebabHorizontalIcon} from '@primer/octicons-react'\nimport {ActionList, ActionMenu, IconButton, type IconButtonProps, merge} from '@primer/react'\nimport {Fragment, useMemo} from 'react'\n\nimport {useActionBarContent} from './ActionBarContentContext'\nimport {useActionBarRef} from './ActionBarRefContext'\nimport {useActionBarResize} from './ActionBarResizeContext'\nimport styles from './OverflowMenu.module.css'\n\nexport type OverflowMenuProps = {\n  anchorProps?: Omit<IconButtonProps, 'aria-labelledby'>\n}\n\nconst defaultMenuToggleIcon = KebabHorizontalIcon\nconst defaultMenuToggleVariant = 'invisible'\n\nexport const OverflowMenu = ({\n  anchorProps: {\n    'aria-label': ariaLabel,\n    icon = defaultMenuToggleIcon,\n    variant = defaultMenuToggleVariant,\n    ...otherAnchorProps\n    // eslint-disable-next-line @eslint-react/no-unstable-default-props\n  } = {\n    icon: defaultMenuToggleIcon,\n    variant: defaultMenuToggleVariant,\n  },\n}: OverflowMenuProps) => {\n  const {anchorRef} = useActionBarRef()\n  const {actions, staticMenuActions, label} = useActionBarContent()\n  const {visibleChildEndIndex} = useActionBarResize()\n\n  const anchorProps = useMemo(\n    () =>\n      merge(otherAnchorProps, {\n        'aria-label': ariaLabel?.trim() || `More ${label}`,\n        icon,\n        className: styles.IconButton_0,\n        variant,\n      }),\n    [ariaLabel, icon, label, variant, otherAnchorProps],\n  )\n  const overflowActions = useMemo(() => actions?.slice(visibleChildEndIndex), [actions, visibleChildEndIndex])\n\n  const hasOverflowActions = overflowActions && overflowActions.length > 0\n  const hasStaticMenuActions = staticMenuActions && staticMenuActions.length > 0\n\n  if (!hasOverflowActions && !hasStaticMenuActions) return null\n\n  return (\n    <ActionMenu anchorRef={anchorRef}>\n      <ActionMenu.Anchor>\n        <IconButton {...testIdProps('overflow-menu-anchor')} {...anchorProps} />\n      </ActionMenu.Anchor>\n      <ActionMenu.Overlay align=\"end\">\n        <ActionList>\n          {hasStaticMenuActions &&\n            staticMenuActions.map(staticMenuAction => (\n              <Fragment key={staticMenuAction.key}>{staticMenuAction.render()}</Fragment>\n            ))}\n\n          {overflowActions?.map(action => <Fragment key={action.key}>{action.render(true)}</Fragment>)}\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n  )\n}\n\ntry{ OverflowMenu.displayName ||= 'OverflowMenu' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"Box_0\":\"VisibleAndOverflowContainer-module__Box_0--cTFgm\",\"space\":\"VisibleAndOverflowContainer-module__space--BaowS\"};","// extracted by mini-css-extract-plugin\nexport default {\"Box_0\":\"VisibleItem-module__Box_0--wJA9C\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {useIsomorphicLayoutEffect} from '@primer/react'\nimport {type PropsWithChildren, useRef} from 'react'\n\nimport {useActionBarResize} from './ActionBarResizeContext'\nimport styles from './VisibleItem.module.css'\n\ntype VisibleItemProps = PropsWithChildren<{actionKey: string}>\n\nexport const VisibleItem = ({children, actionKey: key}: VisibleItemProps) => {\n  const itemRef = useRef<HTMLDivElement>(null)\n  const {recalculateItemSize} = useActionBarResize()\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemRef.current) recalculateItemSize(key, itemRef.current)\n  }, [itemRef, recalculateItemSize, key])\n\n  return (\n    <div {...testIdProps(`action-bar-item-${key}`)} data-action-bar-item={key} ref={itemRef} className={styles.Box_0}>\n      {children}\n    </div>\n  )\n}\n\ntry{ VisibleItem.displayName ||= 'VisibleItem' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"Box_1\":\"VisibleItems-module__Box_1--_dgKR\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {clsx} from 'clsx'\nimport type {CSSProperties} from 'react'\n\nimport {useActionBarContent} from './ActionBarContentContext'\nimport {useActionBarRef} from './ActionBarRefContext'\nimport {useActionBarResize} from './ActionBarResizeContext'\nimport {VisibleItem} from './VisibleItem'\nimport styles from './VisibleItems.module.css'\n\nexport const VisibleItems = ({className, style}: {className?: string; style?: CSSProperties}) => {\n  const {itemContainerRef} = useActionBarRef()\n  const {actions, gap} = useActionBarContent()\n  const {visibleChildEndIndex} = useActionBarResize()\n  const visibleActions = actions?.slice(0, visibleChildEndIndex)\n\n  return (\n    <div\n      {...testIdProps('action-bar')}\n      ref={itemContainerRef}\n      className={clsx(className, styles.Box_1)}\n      style={{gap, ...style}}\n    >\n      {visibleActions?.map(({key, render}) => (\n        <VisibleItem key={key} actionKey={key}>\n          {render(false)}\n        </VisibleItem>\n      ))}\n    </div>\n  )\n}\n\ntry{ VisibleItems.displayName ||= 'VisibleItems' } catch {}","import {testIdProps} from '@github-ui/test-id-props'\nimport {FocusKeys} from '@primer/behaviors'\nimport {useFocusZone} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {CSSProperties, PropsWithChildren} from 'react'\n\nimport {useActionBarContent} from './ActionBarContentContext'\nimport {useActionBarRef} from './ActionBarRefContext'\nimport {useActionBarResize} from './ActionBarResizeContext'\nimport {OverflowMenu, type OverflowMenuProps} from './OverflowMenu'\nimport styles from './VisibleAndOverflowContainer.module.css'\nimport {VisibleItems} from './VisibleItems'\n\nexport type VisibleAndOverflowContainerProps = PropsWithChildren<{\n  overflowMenuToggleProps?: OverflowMenuProps['anchorProps']\n  className?: string\n  style?: CSSProperties\n}>\n\nexport const VisibleAndOverflowContainer = ({\n  overflowMenuToggleProps,\n  children,\n  ...props\n}: VisibleAndOverflowContainerProps) => {\n  const {outerContainerRef} = useActionBarRef()\n  const {label, variant, gap} = useActionBarContent()\n  const {justifySpaceBetween} = useActionBarResize()\n\n  useFocusZone(\n    {\n      containerRef: outerContainerRef,\n      bindKeys: FocusKeys.ArrowHorizontal | FocusKeys.HomeAndEnd,\n      focusOutBehavior: 'wrap',\n      disabled: variant !== 'toolbar',\n    },\n    [outerContainerRef],\n  )\n\n  return (\n    <div\n      ref={outerContainerRef}\n      {...testIdProps('action-bar-container')}\n      role={variant === 'toolbar' ? 'toolbar' : undefined}\n      aria-label={variant === 'toolbar' ? label : undefined}\n      style={{gap}}\n      className={clsx(styles.Box_0, justifySpaceBetween && styles.space)}\n    >\n      <VisibleItems {...props} />\n      {children}\n      <OverflowMenu anchorProps={overflowMenuToggleProps} />\n    </div>\n  )\n}\n\ntry{ VisibleAndOverflowContainer.displayName ||= 'VisibleAndOverflowContainer' } catch {}","import {type ReactNode, type RefObject, useMemo} from 'react'\n\nimport {type ActionBarContentContextProps, ActionBarContentProvider} from './ActionBarContentContext'\nimport {ActionBarRefProvider} from './ActionBarRefContext'\nimport {ActionBarResizeProvider, type ActionBarResizeProviderValueProps} from './ActionBarResizeContext'\nimport type {Density} from './types'\nimport {gapFromDensity} from './utils'\nimport {VisibleAndOverflowContainer, type VisibleAndOverflowContainerProps} from './VisibleAndOverflowContainer'\n\nconst defaultDensity: Density = 'normal'\n\nexport type ActionBarProps = Omit<ActionBarContentContextProps, 'gap'> &\n  Pick<VisibleAndOverflowContainerProps, 'overflowMenuToggleProps' | 'className' | 'style'> & {\n    /**\n     * Any other elements to display in the action bar that shouldn't be collapsed based on available space.\n     */\n    children?: ReactNode\n    /**\n     * Spacing between individual items in the action bar, as well as between items and the overflow menu toggle\n     * button. Defaults to 'normal'.\n     */\n    density?: Density\n\n    /**\n     * A ref to the element that should be used as the anchor for the overflow menu.\n     */\n    anchorRef?: RefObject<HTMLElement>\n  }\n\nconst InternalActionBar = ({children, ...props}: VisibleAndOverflowContainerProps) => (\n  <VisibleAndOverflowContainer {...props}>{children}</VisibleAndOverflowContainer>\n)\n\nexport const ActionBar = ({\n  // eslint-disable-next-line @eslint-react/no-unstable-default-props\n  actions = [],\n  staticMenuActions,\n  overflowMenuToggleProps,\n  children,\n  label,\n  variant,\n  density = defaultDensity,\n  anchorRef,\n  className,\n  style,\n}: ActionBarProps) => {\n  const contentProviderValue = useMemo<ActionBarContentContextProps>(\n    () => ({actions, staticMenuActions, variant, label, gap: gapFromDensity(density)}),\n    [actions, staticMenuActions, variant, label, density],\n  )\n  const resizeProviderValue = useMemo<ActionBarResizeProviderValueProps>(\n    () => ({actionKeys: actions.map(action => action.key)}),\n    [actions],\n  )\n\n  const hasStaticMenuActions = staticMenuActions && staticMenuActions.length > 0\n  const hasActions = actions && actions.length > 0\n\n  if (!hasActions && !hasStaticMenuActions) return null\n\n  const internalActionBarProps = {\n    overflowMenuToggleProps,\n    className,\n    style,\n  }\n\n  return (\n    <ActionBarRefProvider value={{anchorRef}}>\n      <ActionBarContentProvider value={contentProviderValue}>\n        {/* Optimize performance by including resize provider only when `actions` are provided */}\n        {hasActions ? (\n          <ActionBarResizeProvider value={resizeProviderValue}>\n            <InternalActionBar {...internalActionBarProps}>{children}</InternalActionBar>\n          </ActionBarResizeProvider>\n        ) : (\n          <InternalActionBar {...internalActionBarProps}>{children}</InternalActionBar>\n        )}\n      </ActionBarContentProvider>\n    </ActionBarRefProvider>\n  )\n}\n\ntry{ InternalActionBar.displayName ||= 'InternalActionBar' } catch {}\ntry{ ActionBar.displayName ||= 'ActionBar' } catch {}","export const HeaderTags = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] as const\nexport type HeaderTag = (typeof HeaderTags)[number]\nexport const HeaderTagLevels = ['list-view', 'list-view-metadata', 'listitem'] as const\nexport type HeaderTagLevel = (typeof HeaderTagLevels)[number]\nexport const defaultTitleHeaderTag = 'h2' as HeaderTag\nexport const defaultHeaderTags = {\n  'list-view': defaultTitleHeaderTag,\n  'list-view-metadata': 'h3' as HeaderTag,\n  listitem: 'h3' as HeaderTag,\n}\n\nexport const Variants = ['default', 'compact'] as const\n\nexport const defaultVariant = 'default'\nexport const defaultIsSelectable = false\nexport const defaultHasDragHandle = false\nexport const defaultTitle = 'List view'\nexport const defaultTotalCount = 3\nexport const defaultSelectedCount = 0\n","import {useMemo} from 'react'\n\nimport {defaultHeaderTags, type HeaderTag, type HeaderTagLevel, HeaderTagLevels, HeaderTags} from '../constants'\nimport {useListViewTitle} from '../ListView/TitleContext'\n\nexport function useNextHeaderTag(level: HeaderTagLevel): HeaderTag {\n  const {titleHeaderTag, hasMetadataTitle} = useListViewTitle()\n\n  const titleTag = useMemo(() => {\n    const levelIndex = HeaderTagLevels.findIndex(e => e === level)\n    const headerIndex = HeaderTags.indexOf(titleHeaderTag) + (hasMetadataTitle ? levelIndex : levelIndex - 1)\n\n    // https://github.com/github/issues/issues/7295#issuecomment-1679724969\n    // We return h6 even if the preceeding title is h6 for screen reader users to quickly navigate via heading\n    if (headerIndex > HeaderTags.length - 1) return 'h6'\n\n    return HeaderTags[headerIndex] || defaultHeaderTags[level]\n  }, [titleHeaderTag, hasMetadataTitle, level])\n\n  return titleTag\n}\n","import {useState} from 'react'\nimport type React from 'react'\n\n/**\n * When the value that initialized the state changes\n * this hook will update the state to the new value, immediately.\n *\n * This uses an Object.is comparison to determine if the value has changed by default\n *\n * If you use a non-primitive value as the initial value, you should provide a custom isEqual function\n *\n * This is adapted almost directly from https://beta.reactjs.org/learn/you-might-not-need-an-effect#adjusting-some-state-when-a-prop-changes\n *\n * @param initialValue The initial value, mirroring `useState` this accepts either a value of a function that returns an initial value\n * @param opts.isPropUpdateDisabled Whether to skip the update, this is uncommon, but might happen while a form is dirty or something like that\n * @param opts.isEqual The comparison function to use, by default `Object.is` is used\n */\nexport function useSyncedState<T>(\n  initialValue: T | (() => T),\n  {isPropUpdateDisabled = false, isEqual = Object.is} = {},\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = useState(initialValue)\n  const [previousValue, setPreviousValue] = useState(initialValue)\n\n  const nextInitialValue = initialValue instanceof Function ? initialValue() : initialValue\n  /**\n   * This is _not_ done in effect, but instead during render.\n   *\n   * This is safe because it's in the same component. React will immediately queue an update, and\n   * avoid the work in the render pass, which saves a potentially large render cycle that would\n   * get thrown away immediately\n   */\n  if (!isPropUpdateDisabled && !isEqual(previousValue, nextInitialValue)) {\n    setPreviousValue(nextInitialValue)\n    setValue(nextInitialValue)\n  }\n\n  return [value, setValue] as const\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ActionBar-module__container--ZVTfi\",\"hasActions\":\"ActionBar-module__hasActions--cU9tJ\"};","import {ActionBar as GitHubUiActionBar, type ActionBarProps as GitHubUiActionBarProps} from '@github-ui/action-bar'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport type {Icon} from '@primer/octicons-react'\nimport {clsx} from 'clsx'\nimport {useEffect} from 'react'\n\nimport {useListViewItems} from '../ListView/ItemsContext'\nimport type {StylableProps} from '../types'\nimport styles from './ActionBar.module.css'\n\nexport type ListItemActionBarProps = Omit<GitHubUiActionBarProps, 'label' | 'variant' | 'sx'> &\n  StylableProps & {\n    /**\n     * Override the icon used in the button that opens the action menu. Defaults to KebabHorizontalIcon.\n     */\n    anchorIcon?: Icon\n    label?: GitHubUiActionBarProps['label']\n  }\n\nexport const ListItemActionBar = ({\n  anchorIcon,\n  style,\n  className,\n  label = 'list item action bar',\n  ...props\n}: ListItemActionBarProps) => {\n  const {setAnyItemsWithActionBar, setHasResizableActionsWithActionBar} = useListViewItems()\n  useEffect(() => setAnyItemsWithActionBar(true), [setAnyItemsWithActionBar])\n  useEffect(() => {\n    if (props.actions) setHasResizableActionsWithActionBar(true)\n  }, [props.actions, setHasResizableActionsWithActionBar])\n\n  return (\n    <div\n      className={clsx(styles.container, props.actions && styles.hasActions, className)}\n      style={style}\n      {...testIdProps('list-view-item-action-bar-container')}\n    >\n      <GitHubUiActionBar\n        {...props}\n        label={label}\n        variant=\"menu\"\n        overflowMenuToggleProps={anchorIcon ? {icon: anchorIcon} : undefined}\n      />\n    </div>\n  )\n}\n\ntry{ ListItemActionBar.displayName ||= 'ListItemActionBar' } catch {}","import {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nexport type DescriptionContextProps = {\n  /**\n   * The description of the list item.\n   * ListItem description is composed from the aria-label property of the ListItem.DescriptionItem children\n   * Available only when the ListItem.DescriptionItem is included\n   * Used for the aria-label of the list item\n   */\n  description: string\n  setDescription: Dispatch<SetStateAction<string>>\n}\n\nconst DescriptionContext = createContext<DescriptionContextProps | undefined>(undefined)\n\nexport const DescriptionProvider = ({children}: PropsWithChildren) => {\n  const [description, setDescription] = useState('')\n  const contextProps = useMemo(() => ({description, setDescription}) satisfies DescriptionContextProps, [description])\n  return <DescriptionContext.Provider value={contextProps}>{children}</DescriptionContext.Provider>\n}\nDescriptionProvider.displayName = 'ListItemDescriptionProvider'\n\nexport const useListItemDescription = () => {\n  const context = useContext(DescriptionContext)\n  if (!context) throw new Error('useListItemDescription must be used with DescriptionProvider.')\n  return context\n}\n\ntry{ DescriptionContext.displayName ||= 'DescriptionContext' } catch {}","import {noop} from '@github-ui/noop'\nimport type {Dispatch, PropsWithChildren, SetStateAction} from 'react'\nimport {createContext, useContext, useMemo, useState} from 'react'\n\ntype ActionsContextProps = {\n  actionsOpen: boolean\n  setActionsOpen: Dispatch<SetStateAction<boolean>>\n}\n\nconst ActionsContext = createContext<ActionsContextProps>({\n  actionsOpen: false,\n  setActionsOpen: noop,\n})\n\nexport const ActionsProvider = ({children}: PropsWithChildren) => {\n  const [actionsOpen, setActionsOpen] = useState(false)\n  const contextProps = useMemo(() => ({actionsOpen, setActionsOpen}), [actionsOpen])\n  return <ActionsContext.Provider value={contextProps}>{children}</ActionsContext.Provider>\n}\nActionsProvider.displayName = 'ListItemActionsProvider'\n\nexport const useListItemActions = () => {\n  return useContext(ActionsContext)\n}\n\ntry{ ActionsContext.displayName ||= 'ActionsContext' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"ListItem-module__listItem--kHali\",\"compact\":\"ListItem-module__compact--z60S6\",\"hasActionBar\":\"ListItem-module__hasActionBar--av1aD\",\"selected\":\"ListItem-module__selected--BaCDB\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MetadataContainer-module__container--lj6YE\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {clsx} from 'clsx'\nimport type {ReactElement, ReactNode} from 'react'\n\nimport type {StylableProps} from '../types'\nimport type {ListItemMetadata} from './Metadata'\nimport styles from './MetadataContainer.module.css'\n\nexport type ListItemMetadataContainerProps = StylableProps & {\n  children: ReactNode | Array<ReactElement<typeof ListItemMetadata>>\n}\n\nexport function ListItemMetadataContainer({style, className, children}: ListItemMetadataContainerProps) {\n  return (\n    <div className={clsx(styles.container, className)} style={style} {...testIdProps('list-view-item-metadata')}>\n      {children}\n    </div>\n  )\n}\n\ntry{ ListItemMetadataContainer.displayName ||= 'ListItemMetadataContainer' } catch {}","import {noop} from '@github-ui/noop'\nimport {clsx} from 'clsx'\nimport type {FocusEvent, JSX, KeyboardEvent, PropsWithChildren, ReactElement} from 'react'\nimport {Fragment, useCallback, useEffect, useId, useMemo, useRef} from 'react'\n\nimport {useListViewId} from '../ListView/IdContext'\nimport {useListViewItems} from '../ListView/ItemsContext'\nimport {useListViewSelection} from '../ListView/SelectionContext'\nimport {useListViewVariant} from '../ListView/VariantContext'\nimport type {PrefixedStylableProps, StylableProps} from '../types'\nimport {ListItemActionBar} from './ActionBar'\nimport {ActionsProvider} from './ActionsContext'\nimport {DescriptionProvider, useListItemDescription} from './DescriptionContext'\nimport styles from './ListItem.module.css'\nimport {ListItemMetadataContainer, type ListItemMetadataContainerProps} from './MetadataContainer'\nimport {NewActivityProvider, useListItemNewActivity} from './NewActivityContext'\nimport {SelectionProvider, useListItemSelection} from './SelectionContext'\nimport {StatusProvider, useListItemStatus} from './StatusContext'\nimport type {ListItemTitle} from './Title'\nimport {TitleProvider, useListItemTitle} from './TitleContext'\n\nexport type ListItemProps = StylableProps &\n  PrefixedStylableProps<'metadataContainer'> &\n  PropsWithChildren<{\n    isSelected?: boolean\n    isActive?: boolean\n    onSelect?: (isSelected: boolean) => void\n    /*\n     * Optional. Overrides the default behavior of the list item when a key is pressed\n     */\n    onKeyDown?: (event: KeyboardEvent<HTMLLIElement>) => void\n    onFocus?: (event: FocusEvent<HTMLLIElement>) => void\n\n    /**\n     * A ListItem title communicates the overall purpose of the ListItem.\n     */\n    title: ReactElement<typeof ListItemTitle>\n\n    /**\n     * Optional extra elements to display on the right side of the list item. You can optionally wrap individual\n     * pieces of content in `ListItem.Metadata` for a consistent appearance.\n     */\n    metadata?: ListItemMetadataContainerProps['children']\n\n    /**\n     * Optional menu of additional actions to be shown on the right side of the ListItem. Use `ListItem.ActionBar`.\n     */\n    secondaryActions?: ReactElement<typeof ListItemActionBar>\n    /*\n     * Optional. Accessibility role assigned to <li> when not a direct child of a list\n     */\n    role?: string\n    /**\n     * Component type to render for drag and drop container\n     */\n    as?: React.ElementType\n  }>\n\nconst ListItemBase = ({\n  children,\n  isActive = false,\n  title,\n  metadata,\n  secondaryActions,\n  style,\n  className,\n  metadataContainerStyle,\n  metadataContainerClassName,\n  as,\n  ...props\n}: Omit<ListItemProps, 'isSelected' | 'onSelect'>): JSX.Element => {\n  const {idPrefix} = useListViewId()\n  const {isSelectable} = useListViewSelection()\n  const {variant} = useListViewVariant()\n  const {anyItemsWithActionBar, hasResizableActionsWithActionBar} = useListViewItems()\n  const uniqueIdSuffix = useId()\n  const {isSelected, onSelect} = useListItemSelection()\n  const {status: labelStatus} = useListItemStatus()\n  const {title: labelTitle, titleAction, headingRef} = useListItemTitle()\n  const {description: labelDescription} = useListItemDescription()\n  const {hasNewActivity} = useListItemNewActivity()\n  const itemRef = useRef<HTMLLIElement>(null)\n\n  useEffect(() => {\n    if (!itemRef.current) return\n    // Focus the element unless another element in the document is specifically focused\n    if (isActive && document.activeElement?.tagName === 'BODY') {\n      itemRef.current.focus()\n    }\n  })\n\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent<HTMLLIElement>) => {\n      // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      switch (e.key) {\n        case 'Enter':\n          if (titleAction) {\n            // Only trigger title action if focus is on the list item itself or the title element\n            // This prevents triggering when focus is on a child element like a button\n            const activeElement = document.activeElement\n            const isListItemFocused = itemRef.current === activeElement\n            const isTitleFocused =\n              headingRef.current && (headingRef.current === activeElement || headingRef.current.contains(activeElement))\n\n            if (isListItemFocused || isTitleFocused) {\n              titleAction(e)\n            }\n          }\n          break\n        case ' ':\n          // When the user presses Space\n          if (!isSelectable) break\n          if (itemRef?.current !== document.activeElement) break // if the focus is inside the listitem, do not select the item\n          e.preventDefault()\n          onSelect(!isSelected)\n          break\n        case 'Escape':\n          itemRef?.current?.focus()\n          break\n        default:\n          break\n      }\n    },\n    [titleAction, isSelectable, onSelect, isSelected, headingRef],\n  )\n\n  const getAriaLabel = useCallback(() => {\n    const labelSelected = isSelected ? 'Selected' : ''\n    const labelNewActivity = hasNewActivity ? 'New activity' : ''\n    const hasSecondaryActions = !!secondaryActions\n    const hasMetadata = (Array.isArray(metadata) && metadata.length > 0) || (metadata && !Array.isArray(metadata))\n    let labelAdditionalInfo = ''\n    if (hasMetadata || hasSecondaryActions) {\n      labelAdditionalInfo = 'More information available below'\n    }\n\n    let main = [labelTitle, labelStatus].filter(str => str.trim()).join(': ')\n    // Remove additional periods\n    try {\n      // Check if browser supports negative look-behind\n      // eslint-disable-next-line escompat/no-regexp-lookbehind\n      main = main.replace(/(?<!\\.)\\.+$/, '')\n    } catch {\n      while (main.endsWith('.')) {\n        main = main.substring(0, main.length - 1)\n      }\n    }\n\n    const ariaLabel = [labelSelected, main, labelDescription, labelNewActivity, labelAdditionalInfo]\n      .filter(str => str.trim())\n      .join('. ')\n    return ariaLabel.endsWith('.') ? ariaLabel : `${ariaLabel}.`\n  }, [secondaryActions, metadata, isSelected, hasNewActivity, labelTitle, labelStatus, labelDescription])\n\n  const As = as ? as : 'li'\n\n  return (\n    <As\n      ref={itemRef}\n      id={`${idPrefix}-list-view-node-${uniqueIdSuffix}`}\n      className={clsx(\n        styles.listItem,\n        isSelected && styles.selected,\n        variant === 'compact' && styles.compact,\n        anyItemsWithActionBar && hasResizableActionsWithActionBar && styles.hasActionBar,\n        className,\n      )}\n      // Handled by useFocusZone with roving tabIndex\n      tabIndex={-1}\n      aria-label={getAriaLabel()}\n      style={style}\n      onKeyDown={onKeyDown}\n      {...props}\n    >\n      {title}\n      {children}\n      {Array.isArray(metadata) && metadata.length > 0 ? (\n        <ListItemMetadataContainer style={metadataContainerStyle} className={metadataContainerClassName}>\n          {metadata.map((metadataItem, index) => (\n            // eslint-disable-next-line @eslint-react/no-array-index-key\n            <Fragment key={index}>{metadataItem}</Fragment>\n          ))}\n        </ListItemMetadataContainer>\n      ) : (\n        Boolean(metadata && !Array.isArray(metadata)) && (\n          <ListItemMetadataContainer style={metadataContainerStyle} className={metadataContainerClassName}>\n            {metadata}\n          </ListItemMetadataContainer>\n        )\n      )}\n      {secondaryActions ?? (anyItemsWithActionBar && <ListItemActionBar />)}\n    </As>\n  )\n}\n\nexport const ListItem = ({\n  children,\n  isSelected = false,\n  onSelect = noop,\n  ...rest\n}: PropsWithChildren<ListItemProps>): JSX.Element => {\n  const {setSelectedCount} = useListViewSelection()\n  const isSelectedRef = useRef(isSelected)\n\n  isSelectedRef.current = isSelected\n\n  useEffect(() => {\n    setSelectedCount(count => (isSelected ? count + 1 : Math.max(0, count - 1)))\n  }, [isSelected, setSelectedCount])\n\n  useEffect(() => {\n    return () => {\n      if (isSelectedRef.current) {\n        setSelectedCount(count => Math.max(0, count - 1))\n      }\n    }\n  }, [setSelectedCount])\n\n  const selectionProviderProps = useMemo(() => ({isSelected, onSelect}), [isSelected, onSelect])\n\n  return (\n    <ActionsProvider>\n      <TitleProvider>\n        <SelectionProvider value={selectionProviderProps}>\n          <NewActivityProvider>\n            <DescriptionProvider>\n              <StatusProvider>\n                <ListItemBase {...rest}>{children}</ListItemBase>\n              </StatusProvider>\n            </DescriptionProvider>\n          </NewActivityProvider>\n        </SelectionProvider>\n      </TitleProvider>\n    </ActionsProvider>\n  )\n}\n\ntry{ ListItemBase.displayName ||= 'ListItemBase' } catch {}\ntry{ ListItem.displayName ||= 'ListItem' } catch {}","import {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nexport type NewActivityContextProps = {\n  /**\n   * Available only when the ListItem.LeadingVisual is included with the newActivity prop set.\n   * Used for setting the aria-label of the list item.\n   */\n  hasNewActivity: boolean\n  setHasNewActivity: Dispatch<SetStateAction<boolean>>\n}\n\nconst NewActivityContext = createContext<NewActivityContextProps | undefined>(undefined)\n\nexport const NewActivityProvider = ({children}: PropsWithChildren) => {\n  const [hasNewActivity, setHasNewActivity] = useState(false)\n  const contextProps = useMemo(\n    () => ({hasNewActivity, setHasNewActivity}) satisfies NewActivityContextProps,\n    [hasNewActivity],\n  )\n\n  return <NewActivityContext.Provider value={contextProps}>{children}</NewActivityContext.Provider>\n}\nNewActivityProvider.displayName = 'ListItemNewActivityProvider'\n\nexport const useListItemNewActivity = () => {\n  const context = useContext(NewActivityContext)\n  if (!context) throw new Error('useListItemNewActivity must be used with NewActivityProvider.')\n  return context\n}\n\ntry{ NewActivityContext.displayName ||= 'NewActivityContext' } catch {}","import {announce} from '@github-ui/aria-live'\nimport {noop} from '@github-ui/noop'\nimport {createContext, type PropsWithChildren, useContext, useMemo} from 'react'\n\nimport {useListItemTitle} from './TitleContext'\n\nexport type SelectionContextProps = {\n  isSelected: boolean\n  onSelect: (isSelected: boolean) => void\n}\n\nconst SelectionContext = createContext<SelectionContextProps>({isSelected: false, onSelect: noop})\n\ntype SelectionProviderProps = PropsWithChildren & {value: SelectionContextProps}\n\nexport const SelectionProvider = ({children, value: {isSelected, onSelect}}: SelectionProviderProps) => {\n  const {title} = useListItemTitle()\n\n  const contextProps = useMemo(() => {\n    const onSelectAndAnnounce = (selected: boolean) => {\n      announce(selected ? `Selected. ${title}.` : `Unselected. ${title}.`)\n      onSelect(selected)\n    }\n    return {isSelected, onSelect: onSelectAndAnnounce}\n  }, [isSelected, onSelect, title])\n  return <SelectionContext.Provider value={contextProps}>{children}</SelectionContext.Provider>\n}\nSelectionProvider.displayName = 'ListItemSelectionProvider'\n\nexport const useListItemSelection = () => {\n  return useContext(SelectionContext)\n}\n\ntry{ SelectionContext.displayName ||= 'SelectionContext' } catch {}","import {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nexport type StatusContextProps = {\n  /**\n   * A text description of the ListItem.LeadingVisual in the list item\n   * Available only when the ListItem.LeadingVisual is included\n   * Used for the aria-label of the list item\n   */\n  status: string\n  setStatus: Dispatch<SetStateAction<string>>\n}\n\nconst StatusContext = createContext<StatusContextProps | undefined>(undefined)\n\nexport const StatusProvider = ({children}: PropsWithChildren) => {\n  const [status, setStatus] = useState('')\n  const contextProps = useMemo(() => ({status, setStatus}) satisfies StatusContextProps, [status])\n  return <StatusContext.Provider value={contextProps}>{children}</StatusContext.Provider>\n}\nStatusProvider.displayName = 'ListItemStatusProvider'\n\nexport const useListItemStatus = () => {\n  const context = useContext(StatusContext)\n  if (!context) throw new Error('useListItemStatus must be used with StatusProvider.')\n  return context\n}\n\ntry{ StatusContext.displayName ||= 'StatusContext' } catch {}","import {\n  createContext,\n  type Dispatch,\n  type KeyboardEvent,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\n\ntype TitleContextProps = {\n  /**\n   * The main heading of the list item. Used for the aria-label of the list item and displayed visually.\n   */\n  title: string\n  titleAction: ((e: KeyboardEvent<HTMLLIElement>) => void) | null\n  setTitleAction: Dispatch<SetStateAction<((e: KeyboardEvent<HTMLLIElement>) => void) | null>>\n  headingRef: React.MutableRefObject<HTMLDivElement | null>\n}\n\nconst TitleContext = createContext<TitleContextProps | undefined>(undefined)\n\nexport const TitleProvider = ({children}: PropsWithChildren) => {\n  const [title, setTitle] = useState('')\n  const [titleAction, setTitleAction] = useState<TitleContextProps['titleAction']>(null)\n  const headingRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (headingRef?.current?.textContent) {\n      setTitle(headingRef.current.textContent.trim())\n    }\n  }, [headingRef, setTitle])\n\n  const contextProps = useMemo(\n    () =>\n      ({\n        title,\n        titleAction,\n        setTitleAction,\n        headingRef,\n      }) satisfies TitleContextProps,\n    [title, titleAction],\n  )\n  return <TitleContext.Provider value={contextProps}>{children}</TitleContext.Provider>\n}\nTitleProvider.displayName = 'ListItemTitleProvider'\n\nexport const useListItemTitle = () => {\n  const context = useContext(TitleContext)\n  if (!context) throw new Error('useListItemTitle must be used with TitleProvider.')\n  return context\n}\n\ntry{ TitleContext.displayName ||= 'TitleContext' } catch {}","import {createContext, type PropsWithChildren, useContext, useId, useMemo} from 'react'\n\nexport type IdContextProps = {\n  /**\n   * The prefix for use with unique `id` attributes for the list view and its subcomponents.\n   */\n  idPrefix: string\n}\n\nexport const IdContext = createContext<IdContextProps | undefined>(undefined)\n\nexport const IdProvider = ({children}: PropsWithChildren) => {\n  const idPrefix = useId()\n  const contextProps = useMemo(() => ({idPrefix}) satisfies IdContextProps, [idPrefix])\n\n  return <IdContext.Provider value={contextProps}>{children}</IdContext.Provider>\n}\n\nIdProvider.displayName = 'ListViewIdProvider'\n\nexport const useListViewId = () => {\n  const context = useContext(IdContext)\n  if (!context) throw new Error('useListViewId must be used with IdProvider.')\n  return context\n}\n\n/**\n * Determine if it's safe to use the `useListViewId` hook.\n * @returns true when called from within a ListView component\n */\nexport const useIsWithinListView = () => {\n  return useContext(IdContext) !== undefined\n}\n\ntry{ IdContext.displayName ||= 'IdContext' } catch {}","import {noop} from '@github-ui/noop'\nimport {createContext, type PropsWithChildren, useContext, useMemo, useState} from 'react'\n\nexport type ItemsContextProps = {\n  /**\n   * Whether any of the items in the ListView include an action bar. Will be used to ensure consistent\n   * alignment of the ListItem's trailing content.\n   */\n  anyItemsWithActionBar: boolean\n  /**\n   * Register whether any ListItem includes an action bar or not.\n   */\n  setAnyItemsWithActionBar: (hasActionBar: boolean) => void\n  /**\n   * Whether any of the items in the ListView includes actions that will move into a dropdown menu when the screen isn't big enough to\n   * fit them side by side.. Will be used to ensure consistent alignment of the ListItem's trailing content.\n   */\n  hasResizableActionsWithActionBar: boolean\n  setHasResizableActionsWithActionBar: (hasActionBar: boolean) => void\n}\n\nconst ItemsContext = createContext<ItemsContextProps>({\n  anyItemsWithActionBar: false,\n  setAnyItemsWithActionBar: noop,\n  hasResizableActionsWithActionBar: false,\n  setHasResizableActionsWithActionBar: noop,\n})\n\nexport const ItemsProvider = ({children}: PropsWithChildren) => {\n  const [anyItemsWithActionBar, setAnyItemsWithActionBar] = useState(false)\n  const [hasResizableActionsWithActionBar, setHasResizableActionsWithActionBar] = useState(false)\n  const contextProps = useMemo(\n    () =>\n      ({\n        anyItemsWithActionBar,\n        setAnyItemsWithActionBar,\n        hasResizableActionsWithActionBar,\n        setHasResizableActionsWithActionBar,\n      }) satisfies ItemsContextProps,\n    [anyItemsWithActionBar, hasResizableActionsWithActionBar],\n  )\n  return <ItemsContext.Provider value={contextProps}>{children}</ItemsContext.Provider>\n}\n\nItemsProvider.displayName = 'ListViewItemsProvider'\n\nexport const useListViewItems = () => {\n  return useContext(ItemsContext)\n}\n\ntry{ ItemsContext.displayName ||= 'ItemsContext' } catch {}","import {areCharacterKeyShortcutsEnabled} from '@github-ui/hotkey/keyboard-shortcuts-helper'\nimport {FocusKeys} from '@primer/behaviors'\n// eslint-disable-next-line no-restricted-imports\nimport {iterateFocusableElements} from '@primer/behaviors/utils'\nimport {useFocusZone} from '@primer/react'\n\nexport function useRovingTabIndex(strict: boolean | undefined = true): {\n  containerRef: React.RefObject<HTMLElement>\n} {\n  const usesStrictFocusZone = strict === undefined ? true : strict\n  const unconditionallyEnabledKeys =\n    FocusKeys.ArrowVertical | FocusKeys.HomeAndEnd | FocusKeys.PageUpDown | FocusKeys.Tab\n  const bindKeys = areCharacterKeyShortcutsEnabled()\n    ? unconditionallyEnabledKeys | FocusKeys.JK\n    : unconditionallyEnabledKeys\n\n  const {containerRef} = useFocusZone({\n    strict: usesStrictFocusZone,\n    bindKeys,\n    focusInStrategy: () => {\n      if (!containerRef.current) return\n      const lastFocused = containerRef.current.querySelector('[tabindex=\"0\"]') as HTMLElement\n      const listItemToFocus = lastFocused?.closest('[role=list] li') as HTMLElement\n      return listItemToFocus ? listItemToFocus : lastFocused\n    },\n    focusableElementFilter: element => element.getAttribute('role') !== 'list',\n    getNextFocusable: (direction, from, event) => {\n      if (!(from instanceof HTMLElement)) return\n\n      // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      if (event.key === 'Tab' || event.code === 'Tab') {\n        // Custom tab focus behavior:\n        // 1. Check if focus is on the list item\n        // 2. Find the previous focusable element before the list-view.\n        // 3. Move focus to that.\n        if (event.shiftKey && from.id.includes('list-view-node')) {\n          return getFocusElementOutsideOfListView(from, 'previous')\n        }\n\n        const listItem = from.closest('[role=list] li') as HTMLElement\n        if (!listItem) return\n\n        const focusableElements = [...iterateFocusableElements(listItem, {strict: usesStrictFocusZone})]\n\n        // Custom tab behavior when a select input and a trailing badge are present in a list item:\n        // 1. Check if focusableElements contains a trailing badge.\n        // 2. If selectable element also exists then swap the trailing badge and selection focus order\n        const hasTrailingBadgeIndex = focusableElements.findIndex(\n          element => element.parentElement?.getAttribute('data-listview-component') === 'trailing-badge',\n        )\n        const hasSelectableElementIndex = focusableElements.findIndex(\n          element => element.getAttribute('data-listview-component') === 'selection-input',\n        )\n\n        if (hasTrailingBadgeIndex >= 0 && hasSelectableElementIndex >= 0) {\n          focusableElements.splice(hasTrailingBadgeIndex, 0, focusableElements[hasSelectableElementIndex]!)\n          focusableElements.splice(hasSelectableElementIndex + 1, 1)\n        }\n\n        const eventIndex = focusableElements.indexOf(event.target as HTMLElement)\n        if (eventIndex === focusableElements.length - 1 && !event.shiftKey) {\n          // Custom tab focus behavior:\n          // 1. Check if focus is on the last focusable item in a list item\n          // 2. Find the next focusable element after the list-view.\n          // 3. Move focus to that.\n          return getFocusElementOutsideOfListView(from, 'next')\n        } else if (eventIndex > 0) {\n          // If we are within the listitem, move focus to the next/previous focusable element\n          // This is to handle dynamic `visibility: hidden` on elements (e.g. label is hidden/visible based on viewport)\n          if (event.shiftKey) return focusableElements[eventIndex - 1]\n          return focusableElements[eventIndex + 1]\n        }\n\n        // If undefined is returned, the regular algorithm to select the next element to focus will be used.\n        // https://primer.style/react/focusZone#focuszonesettings-interface\n        return\n      }\n\n      if (direction === 'previous') {\n        // Focus previous visible element\n        return getListItemElement(from, direction) || getFirstElement(from)\n      }\n\n      if (direction === 'next') {\n        // Focus next visible element\n        return getListItemElement(from, direction) || getLastElement(from)\n      }\n\n      if (direction === 'start') {\n        return getFirstElement(from)\n      }\n\n      if (direction === 'end') {\n        return getLastElement(from)\n      }\n\n      return undefined\n    },\n  })\n  return {containerRef}\n}\n\nfunction getListItemElement(element: HTMLElement, direction: 'next' | 'previous'): HTMLElement | undefined {\n  let listItem = element\n\n  // In case the event is fired from a child element, find the parent listitem\n  const foundListItem: HTMLElement | null = element.closest('[role=list] li')\n  if (foundListItem) listItem = foundListItem\n\n  const root = listItem.closest('[role=list]')\n  if (!root) return\n\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, node => {\n    if (!(node instanceof HTMLElement)) return NodeFilter.FILTER_SKIP\n\n    const hasListViewNodeId = node.id.includes('list-view-node')\n\n    if (!hasListViewNodeId) return NodeFilter.FILTER_SKIP\n\n    // We want to focus the topmost list-view-node within the list container. This checks\n    // if the list-view-node is nested inside another list-view-node, skipping it if so.\n    let parent = node.parentElement\n    while (parent && parent !== root) {\n      if (parent.id.includes('list-view-node')) {\n        return NodeFilter.FILTER_SKIP\n      }\n      parent = parent.parentElement\n    }\n    // accept the topmost list-view-node and focus\n    return NodeFilter.FILTER_ACCEPT\n  })\n\n  let current = walker.firstChild()\n\n  let i = 0\n  while (current !== listItem) {\n    current = walker.nextNode()\n    i++\n    if (i > 500) break // fail-safe to not cause an endless loop\n  }\n\n  let next = direction === 'next' ? walker.nextNode() : walker.previousNode()\n\n  // If next element is nested inside a collapsed sublist, continue iterating\n  while (next instanceof HTMLElement && next.parentElement?.closest('[role=list] li[aria-expanded=false]')) {\n    next = direction === 'next' ? walker.nextNode() : walker.previousNode()\n  }\n\n  return next instanceof HTMLElement ? next : undefined\n}\n\nfunction getFirstElement(element: HTMLElement): HTMLElement | undefined {\n  const root = element.closest('[role=list]')\n  const first = root?.querySelector('[role=list] li')\n  return first instanceof HTMLElement ? first : undefined\n}\n\nfunction getLastElement(element: HTMLElement): HTMLElement | undefined {\n  const root = element.closest('[role=list]')\n  const items = root?.querySelectorAll('[role=list] li')\n\n  if (!items || items.length < 1) return\n\n  const last = items[items.length - 1]\n  if (last instanceof HTMLElement) return last\n}\n\nfunction getFocusElementOutsideOfListView(\n  element: HTMLElement,\n  direction: 'previous' | 'next',\n): HTMLElement | undefined {\n  // Find all focusable elements in the document excluding elements in ListView.\n  // All focusable elements inside a list-view are programatically given a tabindex of -1 because of the focusZone hook\n  // so by setting onlyTabbable:true we disregard elements in ListView to find the next focusable element outside of list-view\n  const focusableElements = [...iterateFocusableElements(document.documentElement, {strict: true, onlyTabbable: true})]\n  const currentFocusedElementIndex = focusableElements.indexOf(element)\n\n  // Search for the nearest focusable element before/after the current focused element\n  // that is outside of a list view and is focusable.\n  return direction === 'next'\n    ? focusableElements[currentFocusedElementIndex + 1]\n    : focusableElements[currentFocusedElementIndex - 1]\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"ul\":\"ListView-module__ul--vMLEZ\",\"container\":\"ListView-module__container--zF6wW\"};","import {noop} from '@github-ui/noop'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {useSyncedState} from '@github-ui/use-synced-state'\nimport {Heading} from '@primer/react'\nimport {clsx} from 'clsx'\nimport {Children, type MutableRefObject, type PropsWithChildren, type ReactElement, useEffect, useMemo} from 'react'\n\nimport {defaultVariant} from '../constants'\nimport {useRovingTabIndex} from '../hooks/use-roving-tab-index'\nimport type {PrefixedStylableProps} from '../types'\nimport {IdProvider, useListViewId} from './IdContext'\nimport {ItemsProvider} from './ItemsContext'\nimport styles from './ListView.module.css'\nimport type {ListViewMetadata} from './Metadata'\nimport {MultiPageSelectionProvider} from './MultiPageSelectionContext'\nimport {type SelectionContextProps, SelectionProvider} from './SelectionContext'\nimport {TitleProvider, type TitleProviderProps, useListViewTitle} from './TitleContext'\nimport {VariantProvider, type VariantType} from './VariantContext'\n\nexport type ListViewProps = PropsWithChildren<{\n  /**\n   * An optional element to contain bulk actions, a 'Select all' checkbox, a density toggle for the view, etc.\n   */\n  metadata?: ReactElement<typeof ListViewMetadata>\n  /**\n   * Controls the width and height of the list and its contents\n   */\n  variant?: VariantType\n  /**\n   * Callback for when the variant changes\n   */\n  onVariantChange?: (variant: VariantType) => void\n  /**\n   * Controls item's selection mode; bulk actions are allowed if true. Defaults to not selectable.\n   */\n  isSelectable?: boolean\n  /**\n   * Controls if a drag handle is shown. Defaults to no drag handles.\n   */\n  hasDragHandle?: boolean\n  /**\n   * What a single list item should be called. Used to customize assistive text about how many list items are\n   * selected. Defaults to 'list item'.\n   */\n  singularUnits?: string\n  /**\n   * What many list items are called. Used to customize assistive text about how many list items are selected.\n   * Defaults to 'list items'.\n   */\n  pluralUnits?: string\n  /**\n   * Optional ID of an element that labels the list view. When provided, this takes the place of the default sr-only title.\n   */\n  ariaLabelledBy?: string\n  className?: string\n  listRef?: MutableRefObject<HTMLUListElement | undefined>\n  /**\n   * Optional property that passes through to the `strict` prop in the useFocusZone hook in @primer/behaviors.\n   * When true, performs additional checks to determine tabbability which may adversely affect app performance.\n   * Defaults to `true`\n   */\n  strictFocusZone?: boolean\n  /**\n   * Component type to render for drag and drop container\n   */\n  as?: React.ElementType\n\n  role?: string\n}> &\n  Omit<TitleProviderProps, 'children'> &\n  Pick<SelectionContextProps, 'totalCount'> &\n  Partial<Pick<SelectionContextProps, 'selectedCount'>> &\n  PrefixedStylableProps<'itemsList'>\n\nexport const ListView = ({\n  title,\n  titleHeaderTag,\n  children,\n  totalCount,\n  selectedCount = 0,\n  variant: externalVariant = defaultVariant,\n  singularUnits,\n  pluralUnits,\n  onVariantChange = noop,\n  isSelectable,\n  hasDragHandle,\n  ...rest\n}: PropsWithChildren<ListViewProps>): JSX.Element => {\n  const [variant, setVariant] = useSyncedState(externalVariant)\n\n  useEffect(() => {\n    onVariantChange?.(variant)\n  }, [onVariantChange, variant])\n\n  // eslint-disable-next-line @eslint-react/no-children-to-array\n  const countOnPage = useMemo(() => Children.toArray(children).length, [children])\n\n  return (\n    <IdProvider>\n      <TitleProvider title={title} titleHeaderTag={titleHeaderTag}>\n        <VariantProvider variant={variant} setVariant={setVariant}>\n          <SelectionProvider\n            countOnPage={countOnPage}\n            selectedCount={selectedCount}\n            totalCount={totalCount}\n            singularUnits={singularUnits}\n            pluralUnits={pluralUnits}\n            isSelectable={isSelectable}\n            hasDragHandle={hasDragHandle}\n          >\n            <MultiPageSelectionProvider>\n              <ItemsProvider>\n                <ListViewContainer {...rest}>{children}</ListViewContainer>\n              </ItemsProvider>\n            </MultiPageSelectionProvider>\n          </SelectionProvider>\n        </VariantProvider>\n      </TitleProvider>\n    </IdProvider>\n  )\n}\n\nconst ListViewContainer = ({\n  metadata,\n  children,\n  className,\n  listRef,\n  ariaLabelledBy: externalAriaLabelledBy,\n  itemsListClassName,\n  itemsListStyle: style,\n  strictFocusZone,\n  as,\n  role,\n  ...rest\n}: Omit<ListViewProps, 'title' | 'titleHeaderTag'>): JSX.Element => {\n  const {idPrefix} = useListViewId()\n  const {title, titleHeaderTag} = useListViewTitle()\n  const {containerRef} = useRovingTabIndex(strictFocusZone) as {containerRef: MutableRefObject<HTMLUListElement>}\n\n  useEffect(() => {\n    if (listRef) {\n      // eslint-disable-next-line react-hooks/react-compiler\n      listRef.current = containerRef.current\n    }\n  }, [containerRef, listRef])\n\n  const listViewContainerTitleId = externalAriaLabelledBy ?? `${idPrefix}-list-view-container-title`\n\n  const As = as ? as : 'ul'\n\n  return (\n    <div id={`${idPrefix}-list-view-container`} className={clsx(styles.container, className)}>\n      {!externalAriaLabelledBy && (\n        <Heading\n          className=\"sr-only\"\n          as={titleHeaderTag}\n          id={listViewContainerTitleId}\n          {...testIdProps('list-view-title')}\n        >\n          {title}\n        </Heading>\n      )}\n      {/**\n       * The `metadata` component might have a title rendered in it as well, so there can be some\n       * duplication between it and the sr-only list-view-container-title Heading above. However, having that title\n       * is important for accessibility and it's better to slightly over-describe than not. The `metadata`\n       * section is optional while the title attribute and list-view-container-title that renders it are required.\n       */}\n      {metadata}\n      {}\n      <As\n        className={clsx(styles.ul, itemsListClassName)}\n        style={style}\n        ref={containerRef}\n        aria-labelledby={listViewContainerTitleId}\n        tabIndex={-1}\n        // https://ui.githubapp.com/storybook/?path=/docs/recipes-listview-documentation-accessibility-listitem--docs#dom-declarations\n        // The role=\"list\" declaration helps enforce the list announcement,\n        // which is key to understanding what the ListView's main content is, and how it can be interacted with.\n        role={role || 'list'}\n        data-listview-component=\"items-list\"\n        {...testIdProps('list-view-items')}\n        {...rest}\n      >\n        {children}\n      </As>\n    </div>\n  )\n}\n\ntry{ ListView.displayName ||= 'ListView' } catch {}\ntry{ ListViewContainer.displayName ||= 'ListViewContainer' } catch {}","import {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\ntype MultiPageSelectionContextProps = {\n  /**\n   * Indicate whether list items from multiple pages of ListView items can be selected by the user at a time. Used to\n   * determine when the 'Select all' checkbox should be rendered in an indeterminate state, to indicate when some but\n   * not all selectable items are selected.\n   */\n  multiPageSelectionAllowed: boolean\n  setMultiPageSelectionAllowed?: Dispatch<SetStateAction<boolean>>\n}\n\nconst MultiPageSelectionContext = createContext<MultiPageSelectionContextProps>({\n  multiPageSelectionAllowed: false,\n})\n\nexport type MultiPageSelectionProviderProps = PropsWithChildren<{\n  /**\n   * Indicate whether list items from multiple pages of ListView items can be selected by the user at a time. Used to\n   * determine when the 'Select all' checkbox should be rendered in an indeterminate state, to indicate when some but\n   * not all selectable items are selected. Defaults to false.\n   */\n  multiPageSelectionAllowed?: MultiPageSelectionContextProps['multiPageSelectionAllowed']\n}>\n\nexport const MultiPageSelectionProvider = ({\n  children,\n  multiPageSelectionAllowed: externalMultiPageSelectionAllowed = false,\n}: MultiPageSelectionProviderProps) => {\n  const [multiPageSelectionAllowed, setMultiPageSelectionAllowed] = useState(externalMultiPageSelectionAllowed)\n  const contextProps = useMemo(() => {\n    return {\n      multiPageSelectionAllowed,\n      setMultiPageSelectionAllowed,\n    } satisfies MultiPageSelectionContextProps\n  }, [multiPageSelectionAllowed])\n\n  return <MultiPageSelectionContext.Provider value={contextProps}>{children}</MultiPageSelectionContext.Provider>\n}\n\nMultiPageSelectionProvider.displayName = 'ListViewMultiPageSelectionProvider'\n\nexport const useListViewMultiPageSelection = () => {\n  return useContext(MultiPageSelectionContext)\n}\n\ntry{ MultiPageSelectionContext.displayName ||= 'MultiPageSelectionContext' } catch {}","import {noop} from '@github-ui/noop'\nimport {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\n\nimport {defaultHasDragHandle, defaultIsSelectable} from '../constants'\n\nconst defaultSingularUnits = 'list item'\nconst defaultPluralUnits = 'list items'\n\nexport type SelectionContextProps = {\n  /**\n   * How many items are selected in the list. Only applicable when the ListView's isSelectable=true.\n   */\n  selectedCount: number\n\n  /**\n   * Update how many items are selected in the ListView.\n   */\n  setSelectedCount: Dispatch<SetStateAction<number>>\n\n  /**\n   * How many items are in the list. Should represent how many items are in all pages of results, if multiple lists\n   * are shown across many pages.\n   */\n  totalCount?: number\n\n  /**\n   * How many list items are shown on the current page. Reflects how many items can be toggled when the 'Select all'\n   * checkbox is checked or unchecked.\n   */\n  countOnPage: number\n\n  /**\n   * Determine if the 'Select all' checkbox is in a checked state. Will be true when all list items currently rendered\n   * in the ListView are selected.\n   */\n  isSelectAllChecked: boolean\n\n  /**\n   * Determine if any list items are currently selected.\n   */\n  anyItemsSelected: boolean\n\n  /**\n   * What a single list item should be called. Used to customize assistive text about how many list items are\n   * selected.\n   */\n  singularUnits: string\n\n  /**\n   * What many list items are called. Used to customize assistive text about how many list items are selected.\n   */\n  pluralUnits: string\n\n  /**\n   * Whether multiple items at a time or no items can be selected.\n   */\n  isSelectable: boolean\n\n  /**\n   * Whether multiple items at a time or no items can be selected.\n   */\n  hasDragHandle: boolean\n}\n\nconst SelectionContext = createContext<SelectionContextProps>({\n  selectedCount: 0,\n  setSelectedCount: noop,\n  countOnPage: 0,\n  isSelectAllChecked: false,\n  anyItemsSelected: false,\n  singularUnits: defaultSingularUnits,\n  pluralUnits: defaultPluralUnits,\n  isSelectable: defaultIsSelectable,\n  hasDragHandle: defaultHasDragHandle,\n})\n\nexport type SelectionProviderProps = PropsWithChildren<\n  Pick<SelectionContextProps, 'totalCount'> & {\n    singularUnits?: SelectionContextProps['singularUnits']\n    pluralUnits?: SelectionContextProps['pluralUnits']\n    isSelectable?: SelectionContextProps['isSelectable']\n    hasDragHandle?: SelectionContextProps['hasDragHandle']\n    selectedCount?: SelectionContextProps['selectedCount']\n    countOnPage?: SelectionContextProps['countOnPage']\n  }\n>\n\nexport const SelectionProvider = (\n  {\n    children,\n    countOnPage = 0,\n    singularUnits = defaultSingularUnits,\n    pluralUnits = defaultPluralUnits,\n    totalCount,\n    selectedCount: externalSelectedCount = 0,\n    isSelectable = defaultIsSelectable,\n    hasDragHandle = defaultHasDragHandle,\n  }: SelectionProviderProps = {\n    singularUnits: defaultSingularUnits,\n    pluralUnits: defaultPluralUnits,\n    selectedCount: 0,\n    countOnPage: 0,\n    isSelectable: defaultIsSelectable,\n    hasDragHandle: defaultHasDragHandle,\n  },\n) => {\n  const [selectedCount, setSelectedCount] = useState(externalSelectedCount)\n  useEffect(() => setSelectedCount(externalSelectedCount), [externalSelectedCount])\n\n  // Allow for more than shown on page since some ListViews allow selecting all pages of items, and we want to\n  // continue showing the 'Select all' checkbox as checked when more than the current page of items is selected.\n  const isSelectAllChecked = selectedCount > 0 && selectedCount >= countOnPage\n  const anyItemsSelected = selectedCount > 0\n  const contextProps = useMemo(() => {\n    return {\n      totalCount,\n      countOnPage,\n      selectedCount,\n      setSelectedCount,\n      isSelectAllChecked,\n      anyItemsSelected,\n      singularUnits,\n      pluralUnits,\n      isSelectable,\n      hasDragHandle,\n    } satisfies SelectionContextProps\n  }, [\n    totalCount,\n    countOnPage,\n    selectedCount,\n    setSelectedCount,\n    isSelectAllChecked,\n    anyItemsSelected,\n    singularUnits,\n    pluralUnits,\n    isSelectable,\n    hasDragHandle,\n  ])\n\n  return <SelectionContext.Provider value={contextProps}>{children}</SelectionContext.Provider>\n}\nSelectionProvider.displayName = 'ListViewSelectionProvider'\n\nexport const useListViewSelection = () => {\n  return useContext(SelectionContext)\n}\n\ntry{ SelectionContext.displayName ||= 'SelectionContext' } catch {}","import {createContext, type PropsWithChildren, useContext, useMemo, useState} from 'react'\n\nimport {defaultTitle, defaultTitleHeaderTag, type HeaderTag} from '../constants'\n\nexport type TitleContextProps = {\n  /**\n   * A title provides the ListView with a concise, descriptive name that communicates what kind of content it\n   * contains. Will be visually hidden.\n   */\n  title: string\n\n  /**\n   * The HTML element used for the visually hidden title. Should change depending on the information hierarchy of the\n   * page where the ListView is used.\n   */\n  titleHeaderTag: HeaderTag\n\n  hasMetadataTitle: boolean\n  setHasMetadataTitle: (hasMetadataTitle: boolean) => void\n}\n\nconst TitleContext = createContext<TitleContextProps | undefined>(undefined)\n\nexport type TitleProviderProps = PropsWithChildren<{\n  /**\n   * The HTML element used for the visually hidden title. Should change depending on the information hierarchy of the\n   * page where the ListView is used. Defaults to an `<h2>` tag.\n   */\n  titleHeaderTag?: TitleContextProps['titleHeaderTag']\n}> &\n  Pick<TitleContextProps, 'title'>\n\nexport const TitleProvider = ({children, title, titleHeaderTag = defaultTitleHeaderTag}: TitleProviderProps) => {\n  const [hasMetadataTitle, setHasMetadataTitle] = useState(false)\n  const contextProps = useMemo(\n    () =>\n      ({\n        title: title.trim() || defaultTitle,\n        titleHeaderTag,\n        hasMetadataTitle,\n        setHasMetadataTitle,\n      }) satisfies TitleContextProps,\n    [hasMetadataTitle, title, titleHeaderTag],\n  )\n  return <TitleContext.Provider value={contextProps}>{children}</TitleContext.Provider>\n}\n\nTitleProvider.displayName = 'ListViewTitleProvider'\n\nexport const useListViewTitle = () => {\n  const context = useContext(TitleContext)\n  if (!context) throw new Error('useListViewTitle must be used with TitleProvider.')\n  return context\n}\n\ntry{ TitleContext.displayName ||= 'TitleContext' } catch {}","import {noop} from '@github-ui/noop'\nimport {createContext, type PropsWithChildren, useContext, useMemo} from 'react'\n\nimport {defaultVariant, type Variants} from '../constants'\n\nexport type VariantType = (typeof Variants)[number]\n\ntype VariantContextProps = {\n  /**\n   * How the list is being displayed. Controls the width and height of the list and its contents.\n   */\n  variant: VariantType\n  setVariant: (variant: VariantType) => void\n}\n\nconst VariantContext = createContext<VariantContextProps | undefined>(undefined)\n\nexport type VariantProviderProps = PropsWithChildren<{\n  variant?: VariantContextProps['variant']\n  setVariant?: VariantContextProps['setVariant']\n}>\n\nexport const VariantProvider = ({children, variant = defaultVariant, setVariant = noop}: VariantProviderProps) => {\n  const contextProps = useMemo(() => ({variant, setVariant}) satisfies VariantContextProps, [setVariant, variant])\n  return <VariantContext.Provider value={contextProps}>{children}</VariantContext.Provider>\n}\n\nVariantProvider.displayName = 'ListViewVariantProvider'\n\nexport const useListViewVariant = () => {\n  const context = useContext(VariantContext)\n  if (!context) throw new Error('useListViewVariant must be used with VariantProvider.')\n  return context\n}\n\ntry{ VariantContext.displayName ||= 'VariantContext' } catch {}"],"names":["ActionBarContentContext","createContext","actions","staticMenuActions","label","gap","ActionBarContentProvider","children","value","variant","useMemo","Provider","useActionBarContent","context","useContext","displayName","ActionBarRefContext","outerContainerRef","createRef","itemContainerRef","ActionBarRefProvider","anchorRef","useRef","useActionBarRef","columnGap","el","computedStyle","window","getComputedStyle","parseInt","calculateItemOffsetWidth","item","itemContainer","width","getBoundingClientRect","itemStyle","marginLeft","marginRight","calculateMenuSpace","outerContainer","availableSpace","calculateAvailableSpace","menuSpace","offsetLeft","offsetWidth","gapFromDensity","density","ActionBarResizeContext","visibleChildEndIndex","justifySpaceBetween","recalculateItemSize","noop","ActionBarResizeProvider","actionKeys","totalActions","length","setVisibleChildEndIndex","useSyncedState","previousBarWidth","setPreviousBarWidth","useState","initialBarWidth","setInitialBarWidth","itemOffsetWidths","setItemOffsetWidths","Map","map","key","undefined","setJustifySpaceBetween","allItemWidthsCalculated","slice","every","has","get","itemWidthAt","useCallback","index","current","newWidth","oldVal","isNaN","newVal","Array","from","entries","set","shrink","Math","max","grow","itemWidth","min","update","currentBarWidth","useIsomorphicLayoutEffect","widths","querySelector","useResizeObserver","useActionBarResize","defaultMenuToggleIcon","KebabHorizontalIcon","defaultMenuToggleVariant","OverflowMenu","anchorProps","ariaLabel","icon","otherAnchorProps","merge","trim","className","styles","IconButton_0","overflowActions","hasOverflowActions","hasStaticMenuActions","ActionMenu","Anchor","IconButton","testIdProps","Overlay","align","ActionList","staticMenuAction","Fragment","render","action","VisibleItem","actionKey","itemRef","div","data-action-bar-item","ref","Box_0","VisibleItems","style","visibleActions","clsx","Box_1","VisibleAndOverflowContainer","overflowMenuToggleProps","props","useFocusZone","containerRef","bindKeys","FocusKeys","ArrowHorizontal","HomeAndEnd","focusOutBehavior","disabled","role","aria-label","space","defaultDensity","InternalActionBar","ActionBar","contentProviderValue","resizeProviderValue","hasActions","internalActionBarProps","HeaderTags","HeaderTagLevels","defaultTitleHeaderTag","defaultHeaderTags","listitem","defaultVariant","defaultIsSelectable","defaultHasDragHandle","defaultTitle","useNextHeaderTag","level","titleHeaderTag","hasMetadataTitle","useListViewTitle","levelIndex","findIndex","e","headerIndex","indexOf","initialValue","isPropUpdateDisabled","isEqual","Object","is","setValue","previousValue","setPreviousValue","nextInitialValue","Function","ListItemActionBar","anchorIcon","setAnyItemsWithActionBar","setHasResizableActionsWithActionBar","useListViewItems","useEffect","container","GitHubUiActionBar","DescriptionContext","DescriptionProvider","description","setDescription","contextProps","useListItemDescription","ActionsContext","actionsOpen","setActionsOpen","ActionsProvider","ListItemMetadataContainer","ListItemBase","isActive","title","metadata","secondaryActions","metadataContainerStyle","metadataContainerClassName","as","idPrefix","useListViewId","isSelectable","useListViewSelection","useListViewVariant","anyItemsWithActionBar","hasResizableActionsWithActionBar","uniqueIdSuffix","useId","isSelected","onSelect","useListItemSelection","status","labelStatus","useListItemStatus","labelTitle","titleAction","headingRef","useListItemTitle","labelDescription","hasNewActivity","useListItemNewActivity","document","activeElement","tagName","focus","onKeyDown","isListItemFocused","isTitleFocused","contains","preventDefault","getAriaLabel","labelSelected","labelNewActivity","hasSecondaryActions","hasMetadata","isArray","labelAdditionalInfo","main","filter","str","join","replace","endsWith","substring","As","id","listItem","selected","compact","hasActionBar","tabIndex","metadataItem","Boolean","ListItem","rest","setSelectedCount","isSelectedRef","count","selectionProviderProps","TitleProvider","SelectionProvider","NewActivityProvider","StatusProvider","NewActivityContext","setHasNewActivity","SelectionContext","announce","StatusContext","setStatus","TitleContext","setTitle","setTitleAction","textContent","IdContext","IdProvider","ItemsContext","ItemsProvider","getListItemElement","element","direction","foundListItem","closest","root","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","node","HTMLElement","includes","FILTER_SKIP","parent","parentElement","FILTER_ACCEPT","firstChild","i","nextNode","next","previousNode","getFirstElement","first","getLastElement","items","querySelectorAll","last","getFocusElementOutsideOfListView","focusableElements","iterateFocusableElements","documentElement","strict","onlyTabbable","currentFocusedElementIndex","ListView","totalCount","selectedCount","externalVariant","singularUnits","pluralUnits","onVariantChange","hasDragHandle","setVariant","countOnPage","Children","toArray","VariantProvider","MultiPageSelectionProvider","ListViewContainer","listRef","ariaLabelledBy","externalAriaLabelledBy","itemsListClassName","itemsListStyle","strictFocusZone","useRovingTabIndex","usesStrictFocusZone","unconditionallyEnabledKeys","ArrowVertical","PageUpDown","Tab","areCharacterKeyShortcutsEnabled","JK","focusInStrategy","lastFocused","listItemToFocus","focusableElementFilter","getAttribute","getNextFocusable","event","code","shiftKey","hasTrailingBadgeIndex","hasSelectableElementIndex","splice","eventIndex","target","listViewContainerTitleId","Heading","ul","aria-labelledby","data-listview-component","MultiPageSelectionContext","multiPageSelectionAllowed","externalMultiPageSelectionAllowed","setMultiPageSelectionAllowed","useListViewMultiPageSelection","defaultSingularUnits","defaultPluralUnits","isSelectAllChecked","anyItemsSelected","externalSelectedCount","setHasMetadataTitle","VariantContext"],"sourceRoot":""}